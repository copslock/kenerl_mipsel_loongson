Received: with ECARTIS (v1.0.0; list linux-mips); Fri, 23 Mar 2012 20:59:06 +0100 (CET)
Received: from mail-gy0-f177.google.com ([209.85.160.177]:54650 "EHLO
        mail-gy0-f177.google.com" rhost-flags-OK-OK-OK-OK)
        by eddie.linux-mips.org with ESMTP id S1903743Ab2CWT6t (ORCPT
        <rfc822;linux-mips@linux-mips.org>); Fri, 23 Mar 2012 20:58:49 +0100
Received: by ghbf11 with SMTP id f11so3521549ghb.36
        for <multiple recipients>; Fri, 23 Mar 2012 12:58:42 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:sender:in-reply-to:references:date
         :x-google-sender-auth:message-id:subject:from:to:cc:content-type;
        bh=d4YsueQhxRnHc0UWeewTYDSgCMltmgm8o+XEUQCQFcQ=;
        b=uRzh3y5RNpiCTk0MpNHuneU+6ZSL/iQ5XxqDxBr3B3+j2+lM7gUOdNvupVmzd+dIN5
         rxL5ZQIetXkYAs/4Cr7pRtBhy58CoGCGPBBQX1lmBBM7wKNcm2MPLjjsfMh11MFCwNd5
         ZjlNw1mdQwMS4jgJ/8+/iq8sl/ttTJ5tQ+MjbQARgoYZ3ya3gQzhEu2pKoDqozn0yFph
         hWMam3aRMdLYb1VoQs9TkXvGxlSg7Ni4F/NO42nYdppBZSjgAZ4TVI2sQ6yTqrBXtXFm
         b6C8Q6jbmtAsExy7SI9sJg3PNa5GNTDCswOVyVvbdgOSgP+CP2d5h498Y1pmR8RkIw8K
         dqEQ==
MIME-Version: 1.0
Received: by 10.68.222.227 with SMTP id qp3mr31685216pbc.137.1332532722275;
 Fri, 23 Mar 2012 12:58:42 -0700 (PDT)
Received: by 10.142.154.20 with HTTP; Fri, 23 Mar 2012 12:58:42 -0700 (PDT)
In-Reply-To: <20120322144817.796e3a8a@jbarnes-desktop>
References: <20120322144817.796e3a8a@jbarnes-desktop>
Date:   Fri, 23 Mar 2012 12:58:42 -0700
X-Google-Sender-Auth: r5SIuiDvAq_Wo13YggsR-nTyK3o
Message-ID: <CAE9FiQV96Uz9fU=v4=eBbAogOeehuBM3eHgSr0QW_C68ceADcQ@mail.gmail.com>
Subject: Re: [git pull] PCI changes (including maintainer change)
From:   Yinghai Lu <yinghai@kernel.org>
To:     Jesse Barnes <jbarnes@virtuousgeek.org>,
        Ralf Baechle <ralf@linux-mips.org>,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Benjamin Herrenschmidt <benh@kernel.crashing.org>,
        Paul Mackerras <paulus@samba.org>,
        Bjorn Helgaas <bhelgaas@google.com>,
        Grant Likely <grant.likely@secretlab.ca>,
        Rob Herring <rob.herring@calxeda.com>
Cc:     linux-pci@vger.kernel.org, linux-kernel@vger.kernel.org,
        linux-mips@linux-mips.org, linuxppc-dev@lists.ozlabs.org,
        devicetree-discuss@lists.ozlabs.org
Content-Type: multipart/mixed; boundary=047d7b2eded39014da04bbee73ee
X-archive-position: 32740
X-ecartis-version: Ecartis v1.0.0
Sender: linux-mips-bounce@linux-mips.org
Errors-to: linux-mips-bounce@linux-mips.org
X-original-sender: yinghai@kernel.org
Precedence: bulk
X-list: linux-mips
Return-Path: <linux-mips-bounce@linux-mips.org>

--047d7b2eded39014da04bbee73ee
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

On Thu, Mar 22, 2012 at 2:48 PM, Jesse Barnes <jbarnes@virtuousgeek.org> wr=
ote:
> The following changes since commit
> 4f262acfde22b63498b5e4f165e53d3bb4e96400:
>
> =A0Merge branch 'fixes' of git://git.linaro.org/people/rmk/linux-arm (201=
2-03-07 08:33:03 -0800)
>
> are available in the git repository at:
>
> =A0git://git.kernel.org/pub/scm/linux/kernel/git/jbarnes/pci linux-next
>
> This pull has some good cleanups from Bjorn and Yinghai, as well as
> some more code from Yinghai to better handle resource re-allocation
> when enabled.
>
> There's also a new initcall_debug feature from Arjan which will print
> out quirk timing information to help identify slow quirks for fixing or
> refinement (Yinghai sent in a few patches to do just that once the new
> debug code landed).
>
> Beyond that, I'm handing off PCI maintainership to Bjorn Helgaas. =A0He's
> been a core PCI and Linux contributor for some time now, and has kindly
> volunteered to take over. =A0I just don't feel I have the time for PCI
> review and work that it deserves lately (I've taken on some other
> projects), and haven't been as responsive lately as I'd like, so I
> approached Bjorn asking if he'd like to manage things. =A0He's going to
> give it a try, and I'm confident he'll do at least as well as I have in
> keeping the tree managed, patches flowing, and keeping things stable.
>

There are some merge conflicts. Hope attached patch could help Linus a
little bit.

     Yinghai

--047d7b2eded39014da04bbee73ee
Content-Type: text/x-patch; charset=US-ASCII; name="pci_linux_next_merge.patch"
Content-Disposition: attachment; filename="pci_linux_next_merge.patch"
Content-Transfer-Encoding: base64
X-Attachment-Id: f_h05nez6g1

LS0tCiBhcmNoL21pcHMvcGNpL3BjaS5jICAgICAgICAgICAgICAgICAgfCAgICA2IAogYXJjaC9w
b3dlcnBjL2luY2x1ZGUvYXNtL3BwYy1wY2kuaCAgIHwgICAgMyAKIGFyY2gvcG93ZXJwYy9wbGF0
Zm9ybXMvaXNlcmllcy9wY2kuYyB8ICA5MTkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0KIGluY2x1ZGUvbGludXgvcGNpLmggICAgICAgICAgICAgICAgICB8ICAgIDQgCiA0IGZp
bGVzIGNoYW5nZWQsIDkzMiBkZWxldGlvbnMoLSkKCkluZGV4OiBsaW51eC0yLjYvYXJjaC9taXBz
L3BjaS9wY2kuYwo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09Ci0tLSBsaW51eC0yLjYub3JpZy9hcmNoL21pcHMvcGNpL3Bj
aS5jCisrKyBsaW51eC0yLjYvYXJjaC9taXBzL3BjaS9wY2kuYwpAQCAtMjUwLDI1ICsyNTAsMTkg
QEAgaW50IHBjaWJpb3NfZW5hYmxlX2RldmljZShzdHJ1Y3QgcGNpX2RldgogCiB2b2lkIF9fZGV2
aW5pdCBwY2liaW9zX2ZpeHVwX2J1cyhzdHJ1Y3QgcGNpX2J1cyAqYnVzKQogewotPDw8PDw8PCBI
RUFECiAJLyogUHJvcGFnYXRlIGhvc2UgaW5mbyBpbnRvIHRoZSBzdWJvcmRpbmF0ZSBkZXZpY2Vz
LiAgKi8KIAotPT09PT09PQotPj4+Pj4+PiBwY2kvbGludXgtbmV4dAogCXN0cnVjdCBwY2lfZGV2
ICpkZXYgPSBidXMtPnNlbGY7CiAKIAlpZiAocGNpX2hhc19mbGFnKFBDSV9QUk9CRV9PTkxZKSAm
JiBkZXYgJiYKIAkgICAgKGRldi0+Y2xhc3MgPj4gOCkgPT0gUENJX0NMQVNTX0JSSURHRV9QQ0kp
IHsKIAkJcGNpX3JlYWRfYnJpZGdlX2Jhc2VzKGJ1cyk7Ci08PDw8PDw8IEhFQUQKIAkJcGNpYmlv
c19maXh1cF9kZXZpY2VfcmVzb3VyY2VzKGRldiwgYnVzKTsKIAl9CiAKIAlsaXN0X2Zvcl9lYWNo
X2VudHJ5KGRldiwgJmJ1cy0+ZGV2aWNlcywgYnVzX2xpc3QpIHsKIAkJaWYgKChkZXYtPmNsYXNz
ID4+IDgpICE9IFBDSV9DTEFTU19CUklER0VfUENJKQogCQkJcGNpYmlvc19maXh1cF9kZXZpY2Vf
cmVzb3VyY2VzKGRldiwgYnVzKTsKLT09PT09PT0KLT4+Pj4+Pj4gcGNpL2xpbnV4LW5leHQKIAl9
CiB9CiAKSW5kZXg6IGxpbnV4LTIuNi9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vcHBjLXBjaS5o
Cj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT0KLS0tIGxpbnV4LTIuNi5vcmlnL2FyY2gvcG93ZXJwYy9pbmNsdWRlL2FzbS9w
cGMtcGNpLmgKKysrIGxpbnV4LTIuNi9hcmNoL3Bvd2VycGMvaW5jbHVkZS9hc20vcHBjLXBjaS5o
CkBAIC00NSwxMiArNDUsOSBAQCBleHRlcm4gdm9pZCBpbml0X3BjaV9jb25maWdfdG9rZW5zICh2
b2lkCiBleHRlcm4gdW5zaWduZWQgbG9uZyBnZXRfcGhiX2J1aWQgKHN0cnVjdCBkZXZpY2Vfbm9k
ZSAqKTsKIGV4dGVybiBpbnQgcnRhc19zZXR1cF9waGIoc3RydWN0IHBjaV9jb250cm9sbGVyICpw
aGIpOwogCi08PDw8PDw8IEhFQUQKIGV4dGVybiB1bnNpZ25lZCBsb25nIHBjaV9wcm9iZV9vbmx5
OwogCi09PT09PT09CiAvKiAtLS0tIEVFSCBpbnRlcm5hbC11c2Utb25seSByZWxhdGVkIHJvdXRp
bmVzIC0tLS0gKi8KLT4+Pj4+Pj4gcGNpL2xpbnV4LW5leHQKICNpZmRlZiBDT05GSUdfRUVICiAK
IHZvaWQgcGNpX2FkZHJfY2FjaGVfYnVpbGQodm9pZCk7CkluZGV4OiBsaW51eC0yLjYvYXJjaC9w
b3dlcnBjL3BsYXRmb3Jtcy9pc2VyaWVzL3BjaS5jCj09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLS0tIGxpbnV4LTIuNi5v
cmlnL2FyY2gvcG93ZXJwYy9wbGF0Zm9ybXMvaXNlcmllcy9wY2kuYworKysgL2Rldi9udWxsCkBA
IC0xLDkxOSArMCwwIEBACi0vKgotICogQ29weXJpZ2h0IChDKSAyMDAxIEFsbGFuIFRyYXV0bWFu
LCBJQk0gQ29ycG9yYXRpb24KLSAqIENvcHlyaWdodCAoQykgMjAwNSwyMDA3ICBTdGVwaGVuIFJv
dGh3ZWxsLCBJQk0gQ29ycAotICoKLSAqIGlTZXJpZXMgc3BlY2lmaWMgcm91dGluZXMgZm9yIFBD
SS4KLSAqCi0gKiBCYXNlZCBvbiBjb2RlIGZyb20gcGNpLmMgYW5kIGlTZXJpZXNfcGNpLmMgMzJi
aXQKLSAqCi0gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3Ry
aWJ1dGUgaXQgYW5kL29yIG1vZGlmeQotICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUg
R2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKLSAqIHRoZSBGcmVlIFNvZnR3
YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDIgb2YgdGhlIExpY2Vuc2UsIG9yCi0gKiAo
YXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgotICoKLSAqIFRoaXMgcHJvZ3JhbSBp
cyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAotICogYnV0
IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkg
b2YKLSAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9T
RS4gIFNlZSB0aGUKLSAqIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFp
bHMuCi0gKgotICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdl
bmVyYWwgUHVibGljIExpY2Vuc2UKLSAqIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtOyBpZiBub3Qs
IHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlCi0gKiBGb3VuZGF0aW9uLCBJbmMuLCA1OSBUZW1w
bGUgUGxhY2UsIFN1aXRlIDMzMCwgQm9zdG9uLCBNQSAgMDIxMTEtMTMwNyBVU0EKLSAqLwotCi0j
dW5kZWYgREVCVUcKLQotI2luY2x1ZGUgPGxpbnV4L2ppZmZpZXMuaD4KLSNpbmNsdWRlIDxsaW51
eC9rZXJuZWwuaD4KLSNpbmNsdWRlIDxsaW51eC9saXN0Lmg+Ci0jaW5jbHVkZSA8bGludXgvc3Ry
aW5nLmg+Ci0jaW5jbHVkZSA8bGludXgvc2xhYi5oPgotI2luY2x1ZGUgPGxpbnV4L2luaXQuaD4K
LSNpbmNsdWRlIDxsaW51eC9wY2kuaD4KLSNpbmNsdWRlIDxsaW51eC9vZi5oPgotI2luY2x1ZGUg
PGxpbnV4L3JhdGVsaW1pdC5oPgotCi0jaW5jbHVkZSA8YXNtL3R5cGVzLmg+Ci0jaW5jbHVkZSA8
YXNtL2lvLmg+Ci0jaW5jbHVkZSA8YXNtL2lycS5oPgotI2luY2x1ZGUgPGFzbS9wcm9tLmg+Ci0j
aW5jbHVkZSA8YXNtL21hY2hkZXAuaD4KLSNpbmNsdWRlIDxhc20vcGNpLWJyaWRnZS5oPgotI2lu
Y2x1ZGUgPGFzbS9pb21tdS5oPgotI2luY2x1ZGUgPGFzbS9hYnNfYWRkci5oPgotI2luY2x1ZGUg
PGFzbS9maXJtd2FyZS5oPgotCi0jaW5jbHVkZSA8YXNtL2lzZXJpZXMvaHZfdHlwZXMuaD4KLSNp
bmNsdWRlIDxhc20vaXNlcmllcy9odl9jYWxsX3htLmg+Ci0jaW5jbHVkZSA8YXNtL2lzZXJpZXMv
bWYuaD4KLSNpbmNsdWRlIDxhc20vaXNlcmllcy9pb21tdS5oPgotCi0jaW5jbHVkZSA8YXNtL3Bw
Yy1wY2kuaD4KLQotI2luY2x1ZGUgImlycS5oIgotI2luY2x1ZGUgInBjaS5oIgotI2luY2x1ZGUg
ImNhbGxfcGNpLmgiCi0KLSNkZWZpbmUgUENJX1JFVFJZX01BWAkzCi1zdGF0aWMgaW50IGxpbWl0
X3BjaV9yZXRyaWVzID0gMTsJLyogU2V0IFJldHJ5IEVycm9yIG9uLiAqLwotCi0vKgotICogVGFi
bGUgZGVmaW5lcwotICogRWFjaCBFbnRyeSBzaXplIGlzIDQgTUIgKiAxMDI0IEVudHJpZXMgPSA0
R0IgSS9PIGFkZHJlc3Mgc3BhY2UuCi0gKi8KLSNkZWZpbmUgSU9NTV9UQUJMRV9NQVhfRU5UUklF
UwkxMDI0Ci0jZGVmaW5lIElPTU1fVEFCTEVfRU5UUllfU0laRQkweDAwMDAwMDAwMDA0MDAwMDBV
TAotI2RlZmluZSBCQVNFX0lPX01FTU9SWQkJMHhFMDAwMDAwMDAwMDAwMDAwVUwKLSNkZWZpbmUg
RU5EX0lPX01FTU9SWQkJMHhFRkZGRkZGRkZGRkZGRkZGVUwKLQotc3RhdGljIHVuc2lnbmVkIGxv
bmcgbWF4X2lvX21lbW9yeSA9IEJBU0VfSU9fTUVNT1JZOwotc3RhdGljIGxvbmcgY3VycmVudF9p
b21tX3RhYmxlX2VudHJ5OwotCi0vKgotICogTG9va3VwIFRhYmxlcy4KLSAqLwotc3RhdGljIHN0
cnVjdCBkZXZpY2Vfbm9kZSAqaW9tbV90YWJsZVtJT01NX1RBQkxFX01BWF9FTlRSSUVTXTsKLXN0
YXRpYyB1NjQgZHNfYWRkcl90YWJsZVtJT01NX1RBQkxFX01BWF9FTlRSSUVTXTsKLQotc3RhdGlj
IERFRklORV9TUElOTE9DSyhpb21tX3RhYmxlX2xvY2spOwotCi0vKgotICogR2VuZXJhdGUgYSBE
aXJlY3QgU2VsZWN0IEFkZHJlc3MgZm9yIHRoZSBIeXBlcnZpc29yCi0gKi8KLXN0YXRpYyBpbmxp
bmUgdTY0IGlzZXJpZXNfZHNfYWRkcihzdHJ1Y3QgZGV2aWNlX25vZGUgKm5vZGUpCi17Ci0Jc3Ry
dWN0IHBjaV9kbiAqcGRuID0gUENJX0ROKG5vZGUpOwotCWNvbnN0IHUzMiAqc2JwID0gb2ZfZ2V0
X3Byb3BlcnR5KG5vZGUsICJsaW51eCxzdWJidXMiLCBOVUxMKTsKLQotCXJldHVybiAoKHU2NClw
ZG4tPmJ1c25vIDw8IDQ4KSArICgodTY0KShzYnAgPyAqc2JwIDogMCkgPDwgNDApCi0JCQkrICgo
dTY0KTB4MTAgPDwgMzIpOwotfQotCi0vKgotICogU2l6ZSBvZiBCdXMgVlBEIGRhdGEKLSAqLwot
I2RlZmluZSBCVVNfVlBEU0laRSAgICAgIDEwMjQKLQotLyoKLSAqIEJ1cyBWcGQgVGFncwotICov
Ci0jZGVmaW5lIFZQRF9FTkRfT0ZfQVJFQQkJMHg3OQotI2RlZmluZSBWUERfSURfU1RSSU5HCQkw
eDgyCi0jZGVmaW5lIFZQRF9WRU5ET1JfQVJFQQkJMHg4NAotCi0vKgotICogTWZnIEFyZWEgVGFn
cwotICovCi0jZGVmaW5lIFZQRF9GUlVfRlJBTUVfSUQJMHg0NjQ5CS8qICJGSSIgKi8KLSNkZWZp
bmUgVlBEX1NMT1RfTUFQX0ZPUk1BVAkweDRENDYJLyogIk1GIiAqLwotI2RlZmluZSBWUERfU0xP
VF9NQVAJCTB4NTM0RAkvKiAiU00iICovCi0KLS8qCi0gKiBTdHJ1Y3R1cmVzIG9mIHRoZSBhcmVh
cwotICovCi1zdHJ1Y3QgbWZnX3ZwZF9hcmVhIHsKLQl1MTYJdGFnOwotCXU4CWxlbmd0aDsKLQl1
OAlkYXRhMTsKLQl1OAlkYXRhMjsKLX07Ci0jZGVmaW5lIE1GR19FTlRSWV9TSVpFICAgMwotCi1z
dHJ1Y3Qgc2xvdF9tYXAgewotCXU4CWFnZW50OwotCXU4CXNlY29uZGFyeV9hZ2VudDsKLQl1OAlw
aGI7Ci0JY2hhcgljYXJkX2xvY2F0aW9uWzNdOwotCWNoYXIJcGFybXNbOF07Ci0JY2hhcglyZXNl
cnZlZFsyXTsKLX07Ci0jZGVmaW5lIFNMT1RfRU5UUllfU0laRSAgIDE2Ci0KLS8qCi0gKiBQYXJz
ZSB0aGUgU2xvdCBBcmVhCi0gKi8KLXN0YXRpYyB2b2lkIF9faW5pdCBpc2VyaWVzX3BhcnNlX3Ns
b3RfYXJlYShzdHJ1Y3Qgc2xvdF9tYXAgKm1hcCwgaW50IGxlbiwKLQkJSHZBZ2VudElkIGFnZW50
LCB1OCAqcGhiLCBjaGFyIGNhcmRbNF0pCi17Ci0JLyoKLQkgKiBQYXJzZSBTbG90IGxhYmVsIHVu
dGlsIHdlIGZpbmQgdGhlIG9uZSByZXF1ZXN0ZWQKLQkgKi8KLQl3aGlsZSAobGVuID4gMCkgewot
CQlpZiAobWFwLT5hZ2VudCA9PSBhZ2VudCkgewotCQkJLyoKLQkJCSAqIElmIFBoYiB3YXNuJ3Qg
Zm91bmQsIGdyYWIgdGhlIGVudHJ5IGZpcnN0IG9uZSBmb3VuZC4KLQkJCSAqLwotCQkJaWYgKCpw
aGIgPT0gMHhmZikKLQkJCQkqcGhiID0gbWFwLT5waGI7Ci0JCQkvKiBGb3VuZCBpdCwgZXh0cmFj
dCB0aGUgZGF0YS4gKi8KLQkJCWlmIChtYXAtPnBoYiA9PSAqcGhiKSB7Ci0JCQkJbWVtY3B5KGNh
cmQsICZtYXAtPmNhcmRfbG9jYXRpb24sIDMpOwotCQkJCWNhcmRbM10gID0gMDsKLQkJCQlicmVh
azsKLQkJCX0KLQkJfQotCQkvKiBQb2ludCB0byB0aGUgbmV4dCBTbG90ICovCi0JCW1hcCA9IChz
dHJ1Y3Qgc2xvdF9tYXAgKikoKGNoYXIgKiltYXAgKyBTTE9UX0VOVFJZX1NJWkUpOwotCQlsZW4g
LT0gU0xPVF9FTlRSWV9TSVpFOwotCX0KLX0KLQotLyoKLSAqIFBhcnNlIHRoZSBNZmcgQXJlYQot
ICovCi1zdGF0aWMgdm9pZCBfX2luaXQgaXNlcmllc19wYXJzZV9tZmdfYXJlYShzdHJ1Y3QgbWZn
X3ZwZF9hcmVhICphcmVhLCBpbnQgbGVuLAotCQlIdkFnZW50SWQgYWdlbnQsIHU4ICpwaGIsIHU4
ICpmcmFtZSwgY2hhciBjYXJkWzRdKQotewotCXUxNiBzbG90X21hcF9mbXQgPSAwOwotCi0JLyog
UGFyc2UgTWZnIERhdGEgKi8KLQl3aGlsZSAobGVuID4gMCkgewotCQlpbnQgbWZnX3RhZ19sZW4g
PSBhcmVhLT5sZW5ndGg7Ci0JCS8qIEZyYW1lIElEICAgICAgICAgKEZJIDQ2NDkwMjAzMTAgKSAq
LwotCQlpZiAoYXJlYS0+dGFnID09IFZQRF9GUlVfRlJBTUVfSUQpCi0JCQkqZnJhbWUgPSBhcmVh
LT5kYXRhMTsKLQkJLyogU2xvdCBNYXAgRm9ybWF0ICAoTUYgNEQ0NjAyMDAwNCApICovCi0JCWVs
c2UgaWYgKGFyZWEtPnRhZyA9PSBWUERfU0xPVF9NQVBfRk9STUFUKQotCQkJc2xvdF9tYXBfZm10
ID0gKGFyZWEtPmRhdGExICogMjU2KQotCQkJCSsgYXJlYS0+ZGF0YTI7Ci0JCS8qIFNsb3QgTWFw
ICAgICAgICAgKFNNIDUzNEQ5MCAqLwotCQllbHNlIGlmIChhcmVhLT50YWcgPT0gVlBEX1NMT1Rf
TUFQKSB7Ci0JCQlzdHJ1Y3Qgc2xvdF9tYXAgKnNsb3RfbWFwOwotCi0JCQlpZiAoc2xvdF9tYXBf
Zm10ID09IDB4MTAwNCkKLQkJCQlzbG90X21hcCA9IChzdHJ1Y3Qgc2xvdF9tYXAgKikoKGNoYXIg
KilhcmVhCi0JCQkJCQkrIE1GR19FTlRSWV9TSVpFICsgMSk7Ci0JCQllbHNlCi0JCQkJc2xvdF9t
YXAgPSAoc3RydWN0IHNsb3RfbWFwICopKChjaGFyICopYXJlYQotCQkJCQkJKyBNRkdfRU5UUllf
U0laRSk7Ci0JCQlpc2VyaWVzX3BhcnNlX3Nsb3RfYXJlYShzbG90X21hcCwgbWZnX3RhZ19sZW4s
Ci0JCQkJCWFnZW50LCBwaGIsIGNhcmQpOwotCQl9Ci0JCS8qCi0JCSAqIFBvaW50IHRvIHRoZSBu
ZXh0IE1mZyBBcmVhCi0JCSAqIFVzZSBkZWZpbmVkIHNpemUsIHNpemVvZiBnaXZlIHdyb25nIGFu
c3dlcgotCQkgKi8KLQkJYXJlYSA9IChzdHJ1Y3QgbWZnX3ZwZF9hcmVhICopKChjaGFyICopYXJl
YSArIG1mZ190YWdfbGVuCi0JCQkJKyBNRkdfRU5UUllfU0laRSk7Ci0JCWxlbiAtPSAobWZnX3Rh
Z19sZW4gKyBNRkdfRU5UUllfU0laRSk7Ci0JfQotfQotCi0vKgotICogTG9vayBmb3IgIkJVUyIu
LiBEYXRhIGlzIG5vdCBOdWxsIHRlcm1pbmF0ZWQuCi0gKiBQSEJJRCBvZiAweEZGIGluZGljYXRl
cyBQSEIgd2FzIG5vdCBmb3VuZCBpbiBWUEQgRGF0YS4KLSAqLwotc3RhdGljIHU4IF9faW5pdCBp
c2VyaWVzX3BhcnNlX3BoYmlkKHU4ICphcmVhLCBpbnQgbGVuKQotewotCXdoaWxlIChsZW4gPiAw
KSB7Ci0JCWlmICgoKmFyZWEgPT0gJ0InKSAmJiAoKihhcmVhICsgMSkgPT0gJ1UnKQotCQkJCSYm
ICgqKGFyZWEgKyAyKSA9PSAnUycpKSB7Ci0JCQlhcmVhICs9IDM7Ci0JCQl3aGlsZSAoKmFyZWEg
PT0gJyAnKQotCQkJCWFyZWErKzsKLQkJCXJldHVybiAqYXJlYSAmIDB4MEY7Ci0JCX0KLQkJYXJl
YSsrOwotCQlsZW4tLTsKLQl9Ci0JcmV0dXJuIDB4ZmY7Ci19Ci0KLS8qCi0gKiBQYXJzZSBvdXQg
dGhlIFZQRCBBcmVhcwotICovCi1zdGF0aWMgdm9pZCBfX2luaXQgaXNlcmllc19wYXJzZV92cGQo
dTggKmRhdGEsIGludCBkYXRhX2xlbiwKLQkJSHZBZ2VudElkIGFnZW50LCB1OCAqZnJhbWUsIGNo
YXIgY2FyZFs0XSkKLXsKLQl1OCBwaGIgPSAweGZmOwotCi0Jd2hpbGUgKGRhdGFfbGVuID4gMCkg
ewotCQlpbnQgbGVuOwotCQl1OCB0YWcgPSAqZGF0YTsKLQotCQlpZiAodGFnID09IFZQRF9FTkRf
T0ZfQVJFQSkKLQkJCWJyZWFrOwotCQlsZW4gPSAqKGRhdGEgKyAxKSArICgqKGRhdGEgKyAyKSAq
IDI1Nik7Ci0JCWRhdGEgKz0gMzsKLQkJZGF0YV9sZW4gLT0gMzsKLQkJaWYgKHRhZyA9PSBWUERf
SURfU1RSSU5HKQotCQkJcGhiID0gaXNlcmllc19wYXJzZV9waGJpZChkYXRhLCBsZW4pOwotCQll
bHNlIGlmICh0YWcgPT0gVlBEX1ZFTkRPUl9BUkVBKQotCQkJaXNlcmllc19wYXJzZV9tZmdfYXJl
YSgoc3RydWN0IG1mZ192cGRfYXJlYSAqKWRhdGEsIGxlbiwKLQkJCQkJYWdlbnQsICZwaGIsIGZy
YW1lLCBjYXJkKTsKLQkJLyogUG9pbnQgdG8gbmV4dCBBcmVhLiAqLwotCQlkYXRhICs9IGxlbjsK
LQkJZGF0YV9sZW4gLT0gbGVuOwotCX0KLX0KLQotc3RhdGljIGludCBfX2luaXQgaXNlcmllc19n
ZXRfbG9jYXRpb25fY29kZSh1MTYgYnVzLCBIdkFnZW50SWQgYWdlbnQsCi0JCXU4ICpmcmFtZSwg
Y2hhciBjYXJkWzRdKQotewotCWludCBzdGF0dXMgPSAwOwotCWludCBidXNfdnBkX2xlbiA9IDA7
Ci0JdTggKmJ1c192cGQgPSBrbWFsbG9jKEJVU19WUERTSVpFLCBHRlBfS0VSTkVMKTsKLQotCWlm
IChidXNfdnBkID09IE5VTEwpIHsKLQkJcHJpbnRrKCJQQ0k6IEJ1cyBWUEQgQnVmZmVyIGFsbG9j
YXRpb24gZmFpbHVyZS5cbiIpOwotCQlyZXR1cm4gMDsKLQl9Ci0JYnVzX3ZwZF9sZW4gPSBIdkNh
bGxQY2lfZ2V0QnVzVnBkKGJ1cywgaXNlcmllc19odl9hZGRyKGJ1c192cGQpLAotCQkJCQlCVVNf
VlBEU0laRSk7Ci0JaWYgKGJ1c192cGRfbGVuID09IDApIHsKLQkJcHJpbnRrKCJQQ0k6IEJ1cyBW
UEQgQnVmZmVyIHplcm8gbGVuZ3RoLlxuIik7Ci0JCWdvdG8gb3V0X2ZyZWU7Ci0JfQotCS8qIHBy
aW50aygiUENJOiBidXNfdnBkOiAlcCwgJWRcbiIsYnVzX3ZwZCwgYnVzX3ZwZF9sZW4pOyAqLwot
CS8qIE1ha2Ugc3VyZSB0aGlzIGlzIHdoYXQgSSB0aGluayBpdCBpcyAqLwotCWlmICgqYnVzX3Zw
ZCAhPSBWUERfSURfU1RSSU5HKSB7Ci0JCXByaW50aygiUENJOiBCdXMgVlBEIEJ1ZmZlciBtaXNz
aW5nIHN0YXJ0aW5nIHRhZy5cbiIpOwotCQlnb3RvIG91dF9mcmVlOwotCX0KLQlpc2VyaWVzX3Bh
cnNlX3ZwZChidXNfdnBkLCBidXNfdnBkX2xlbiwgYWdlbnQsIGZyYW1lLCBjYXJkKTsKLQlzdGF0
dXMgPSAxOwotb3V0X2ZyZWU6Ci0Ja2ZyZWUoYnVzX3ZwZCk7Ci0JcmV0dXJuIHN0YXR1czsKLX0K
LQotLyoKLSAqIFByaW50cyB0aGUgZGV2aWNlIGluZm9ybWF0aW9uLgotICogLSBQYXNzIGluIHBj
aV9kZXYqIHBvaW50ZXIgdG8gdGhlIGRldmljZS4KLSAqIC0gUGFzcyBpbiB0aGUgZGV2aWNlIGNv
dW50Ci0gKgotICogRm9ybWF0OgotICogUENJOiBCdXMgIDAsIERldmljZSAyNiwgVmVuZG9yIDB4
MTJBRSAgRnJhbWUgIDEsIENhcmQgIEMxMCAgRXRoZXJuZXQKLSAqIGNvbnRyb2xsZXIKLSAqLwot
c3RhdGljIHZvaWQgX19pbml0IGlzZXJpZXNfZGV2aWNlX2luZm9ybWF0aW9uKHN0cnVjdCBwY2lf
ZGV2ICpwZGV2LAotCQkJCQkgICAgICB1MTYgYnVzLCBIdlN1YkJ1c051bWJlciBzdWJidXMpCi17
Ci0JdTggZnJhbWUgPSAwOwotCWNoYXIgY2FyZFs0XTsKLQlIdkFnZW50SWQgYWdlbnQ7Ci0KLQlh
Z2VudCA9IElTRVJJRVNfUENJX0FHRU5USUQoSVNFUklFU19HRVRfREVWSUNFX0ZST01fU1VCQlVT
KHN1YmJ1cyksCi0JCQlJU0VSSUVTX0dFVF9GVU5DVElPTl9GUk9NX1NVQkJVUyhzdWJidXMpKTsK
LQotCWlmIChpc2VyaWVzX2dldF9sb2NhdGlvbl9jb2RlKGJ1cywgYWdlbnQsICZmcmFtZSwgY2Fy
ZCkpIHsKLQkJcHJpbnRrKEtFUk5fSU5GTyAiUENJOiAlcywgVmVuZG9yICUwNFggRnJhbWUlM2Qs
ICIKLQkJICAgICAgICJDYXJkICU0cyAgMHglMDRYXG4iLCBwY2lfbmFtZShwZGV2KSwgcGRldi0+
dmVuZG9yLAotCQkgICAgICAgZnJhbWUsIGNhcmQsIChpbnQpKHBkZXYtPmNsYXNzID4+IDgpKTsK
LQl9Ci19Ci0KLS8qCi0gKiBpb21tX3RhYmxlX2FsbG9jYXRlX2VudHJ5Ci0gKgotICogQWRkcyBw
Y2lfZGV2IGVudHJ5IGluIGFkZHJlc3MgdHJhbnNsYXRpb24gdGFibGUKLSAqCi0gKiAtIEFsbG9j
YXRlcyB0aGUgbnVtYmVyIG9mIGVudHJpZXMgcmVxdWlyZWQgaW4gdGFibGUgYmFzZSBvbiBCQVIK
LSAqICAgc2l6ZS4KLSAqIC0gQWxsb2NhdGVzIHN0YXJ0aW5nIGF0IEJBU0VfSU9fTUVNT1JZIGFu
ZCBpbmNyZWFzZXMuCi0gKiAtIFRoZSBzaXplIGlzIHJvdW5kIHVwIHRvIGJlIGEgbXVsdGlwbGUg
b2YgZW50cnkgc2l6ZS4KLSAqIC0gQ3VycmVudEluZGV4IGlzIGluY3JlbWVudGVkIHRvIGtlZXAg
dHJhY2sgb2YgdGhlIGxhc3QgZW50cnkuCi0gKiAtIEJ1aWxkcyB0aGUgcmVzb3VyY2UgZW50cnkg
Zm9yIGFsbG9jYXRlZCBCQVJzLgotICovCi1zdGF0aWMgdm9pZCBfX2luaXQgaW9tbV90YWJsZV9h
bGxvY2F0ZV9lbnRyeShzdHJ1Y3QgcGNpX2RldiAqZGV2LCBpbnQgYmFyX251bSkKLXsKLQlzdHJ1
Y3QgcmVzb3VyY2UgKmJhcl9yZXMgPSAmZGV2LT5yZXNvdXJjZVtiYXJfbnVtXTsKLQlsb25nIGJh
cl9zaXplID0gcGNpX3Jlc291cmNlX2xlbihkZXYsIGJhcl9udW0pOwotCXN0cnVjdCBkZXZpY2Vf
bm9kZSAqZG4gPSBwY2lfZGV2aWNlX3RvX09GX25vZGUoZGV2KTsKLQotCS8qCi0JICogTm8gc3Bh
Y2UgdG8gYWxsb2NhdGUsIHF1aWNrIGV4aXQsIHNraXAgQWxsb2NhdGlvbi4KLQkgKi8KLQlpZiAo
YmFyX3NpemUgPT0gMCkKLQkJcmV0dXJuOwotCS8qCi0JICogU2V0IFJlc291cmNlIHZhbHVlcy4K
LQkgKi8KLQlzcGluX2xvY2soJmlvbW1fdGFibGVfbG9jayk7Ci0JYmFyX3Jlcy0+c3RhcnQgPSBC
QVNFX0lPX01FTU9SWSArCi0JCUlPTU1fVEFCTEVfRU5UUllfU0laRSAqIGN1cnJlbnRfaW9tbV90
YWJsZV9lbnRyeTsKLQliYXJfcmVzLT5lbmQgPSBiYXJfcmVzLT5zdGFydCArIGJhcl9zaXplIC0g
MTsKLQkvKgotCSAqIEFsbG9jYXRlIHRoZSBudW1iZXIgb2YgdGFibGUgZW50cmllcyBuZWVkZWQg
Zm9yIEJBUi4KLQkgKi8KLQl3aGlsZSAoYmFyX3NpemUgPiAwICkgewotCQlpb21tX3RhYmxlW2N1
cnJlbnRfaW9tbV90YWJsZV9lbnRyeV0gPSBkbjsKLQkJZHNfYWRkcl90YWJsZVtjdXJyZW50X2lv
bW1fdGFibGVfZW50cnldID0KLQkJCWlzZXJpZXNfZHNfYWRkcihkbikgfCAoYmFyX251bSA8PCAy
NCk7Ci0JCWJhcl9zaXplIC09IElPTU1fVEFCTEVfRU5UUllfU0laRTsKLQkJKytjdXJyZW50X2lv
bW1fdGFibGVfZW50cnk7Ci0JfQotCW1heF9pb19tZW1vcnkgPSBCQVNFX0lPX01FTU9SWSArCi0J
CUlPTU1fVEFCTEVfRU5UUllfU0laRSAqIGN1cnJlbnRfaW9tbV90YWJsZV9lbnRyeTsKLQlzcGlu
X3VubG9jaygmaW9tbV90YWJsZV9sb2NrKTsKLX0KLQotLyoKLSAqIGFsbG9jYXRlX2RldmljZV9i
YXJzCi0gKgotICogLSBBbGxvY2F0ZXMgQUxMIHBjaV9kZXYgQkFSJ3MgYW5kIHVwZGF0ZXMgdGhl
IHJlc291cmNlcyB3aXRoIHRoZQotICogICBCQVIgdmFsdWUuICBCQVJTIHdpdGggemVybyBsZW5n
dGggd2lsbCBoYXZlIHRoZSByZXNvdXJjZXMKLSAqICAgVGhlIEh2Q2FsbFBjaV9nZXRCYXJQYXJt
cyBpcyB1c2VkIHRvIGdldCB0aGUgc2l6ZSBvZiB0aGUgQkFSCi0gKiAgIHNwYWNlLiAgSXQgY2Fs
bHMgaW9tbV90YWJsZV9hbGxvY2F0ZV9lbnRyeSB0byBhbGxvY2F0ZQotICogICBlYWNoIGVudHJ5
LgotICogLSBMb29wcyB0aHJvdWdoIFRoZSBCYXIgcmVzb3VyY2VzKDAgLSA1KSBpbmNsdWRpbmcg
dGhlIFJPTQotICogICBpcyByZXNvdXJjZSg2KS4KLSAqLwotc3RhdGljIHZvaWQgX19pbml0IGFs
bG9jYXRlX2RldmljZV9iYXJzKHN0cnVjdCBwY2lfZGV2ICpkZXYpCi17Ci0JaW50IGJhcl9udW07
Ci0KLQlmb3IgKGJhcl9udW0gPSAwOyBiYXJfbnVtIDw9IFBDSV9ST01fUkVTT1VSQ0U7ICsrYmFy
X251bSkKLQkJaW9tbV90YWJsZV9hbGxvY2F0ZV9lbnRyeShkZXYsIGJhcl9udW0pOwotfQotCi0v
KgotICogTG9nIGVycm9yIGluZm9ybWF0aW9uIHRvIHN5c3RlbSBjb25zb2xlLgotICogRmlsdGVy
IG91dCB0aGUgZGV2aWNlIG5vdCB0aGVyZSBlcnJvcnMuCi0gKiBQQ0k6IEVBRHMgQ29ubmVjdCBG
YWlsZWQgMHgxOC41OC4xMCBSYzogMHgwMHh4Ci0gKiBQQ0k6IFJlYWQgVmVuZG9yIEZhaWxlZCAw
eDE4LjU4LjEwIFJjOiAweDAweHgKLSAqIFBDSTogQ29ubmVjdCBCdXMgVW5pdCBGYWlsZWQgMHgx
OC41OC4xMCBSYzogMHgwMHh4Ci0gKi8KLXN0YXRpYyB2b2lkIHBjaV9sb2dfZXJyb3IoY2hhciAq
ZXJyb3IsIGludCBidXMsIGludCBzdWJidXMsCi0JCWludCBhZ2VudCwgaW50IGh2X3JlcykKLXsK
LQlpZiAoaHZfcmVzID09IDB4MDMwMikKLQkJcmV0dXJuOwotCXByaW50ayhLRVJOX0VSUiAiUENJ
OiAlcyBGYWlsZWQ6IDB4JTAyWC4lMDJYLiUwMlggUmM6IDB4JTA0WCIsCi0JICAgICAgIGVycm9y
LCBidXMsIHN1YmJ1cywgYWdlbnQsIGh2X3Jlcyk7Ci19Ci0KLS8qCi0gKiBMb29rIGRvd24gdGhl
IGNoYWluIHRvIGZpbmQgdGhlIG1hdGNoaW5nIERldmljZSBEZXZpY2UKLSAqLwotc3RhdGljIHN0
cnVjdCBkZXZpY2Vfbm9kZSAqZmluZF9kZXZpY2Vfbm9kZShpbnQgYnVzLCBpbnQgZGV2Zm4pCi17
Ci0Jc3RydWN0IGRldmljZV9ub2RlICpub2RlOwotCi0JZm9yIChub2RlID0gTlVMTDsgKG5vZGUg
PSBvZl9maW5kX2FsbF9ub2Rlcyhub2RlKSk7ICkgewotCQlzdHJ1Y3QgcGNpX2RuICpwZG4gPSBQ
Q0lfRE4obm9kZSk7Ci0KLQkJaWYgKHBkbiAmJiAoYnVzID09IHBkbi0+YnVzbm8pICYmIChkZXZm
biA9PSBwZG4tPmRldmZuKSkKLQkJCXJldHVybiBub2RlOwotCX0KLQlyZXR1cm4gTlVMTDsKLX0K
LQotLyoKLSAqIGlTZXJpZXNfcGNpYmlvc19maXh1cF9yZXNvdXJjZXMKLSAqCi0gKiBGaXhlcyB1
cCBhbGwgcmVzb3VyY2VzIGZvciBkZXZpY2VzCi0gKi8KLXZvaWQgX19pbml0IGlTZXJpZXNfcGNp
Ymlvc19maXh1cF9yZXNvdXJjZXMoc3RydWN0IHBjaV9kZXYgKnBkZXYpCi17Ci0JY29uc3QgdTMy
ICphZ2VudDsKLQljb25zdCB1MzIgKnN1Yl9idXM7Ci0JdW5zaWduZWQgY2hhciBidXMgPSBwZGV2
LT5idXMtPm51bWJlcjsKLQlzdHJ1Y3QgZGV2aWNlX25vZGUgKm5vZGU7Ci0JaW50IGk7Ci0KLQlu
b2RlID0gcGNpX2RldmljZV90b19PRl9ub2RlKHBkZXYpOwotCXByX2RlYnVnKCJQQ0k6IGlTZXJp
ZXMgJXMsIHBkZXYgJXAsIG5vZGUgJXBcbiIsCi0JCSBwY2lfbmFtZShwZGV2KSwgcGRldiwgbm9k
ZSk7Ci0JaWYgKCFub2RlKSB7Ci0JCXByaW50aygiUENJOiAlcyBkaXNhYmxlZCwgZGV2aWNlIHRy
ZWUgZW50cnkgbm90IGZvdW5kICFcbiIsCi0JCSAgICAgICBwY2lfbmFtZShwZGV2KSk7Ci0JCWZv
ciAoaSA9IDA7IGkgPD0gUENJX1JPTV9SRVNPVVJDRTsgaSsrKQotCQkJcGRldi0+cmVzb3VyY2Vb
aV0uZmxhZ3MgPSAwOwotCQlyZXR1cm47Ci0JfQotCXN1Yl9idXMgPSBvZl9nZXRfcHJvcGVydHko
bm9kZSwgImxpbnV4LHN1YmJ1cyIsIE5VTEwpOwotCWFnZW50ID0gb2ZfZ2V0X3Byb3BlcnR5KG5v
ZGUsICJsaW51eCxhZ2VudC1pZCIsIE5VTEwpOwotCWlmIChhZ2VudCAmJiBzdWJfYnVzKSB7Ci0J
CXU4IGlycSA9IGlTZXJpZXNfYWxsb2NhdGVfSVJRKGJ1cywgMCwgKnN1Yl9idXMpOwotCQlpbnQg
ZXJyOwotCi0JCWVyciA9IEh2Q2FsbFhtX2Nvbm5lY3RCdXNVbml0KGJ1cywgKnN1Yl9idXMsICph
Z2VudCwgaXJxKTsKLQkJaWYgKGVycikKLQkJCXBjaV9sb2dfZXJyb3IoIkNvbm5lY3QgQnVzIFVu
aXQiLAotCQkJCSAgICAgIGJ1cywgKnN1Yl9idXMsICphZ2VudCwgZXJyKTsKLQkJZWxzZSB7Ci0J
CQllcnIgPSBIdkNhbGxQY2lfY29uZmlnU3RvcmU4KGJ1cywgKnN1Yl9idXMsCi0JCQkJCSphZ2Vu
dCwgUENJX0lOVEVSUlVQVF9MSU5FLCBpcnEpOwotCQkJaWYgKGVycikKLQkJCQlwY2lfbG9nX2Vy
cm9yKCJQY2lDZmdTdG9yZSBJcnEgRmFpbGVkISIsCi0JCQkJCQlidXMsICpzdWJfYnVzLCAqYWdl
bnQsIGVycik7Ci0JCQllbHNlCi0JCQkJcGRldi0+aXJxID0gaXJxOwotCQl9Ci0JfQotCi0JYWxs
b2NhdGVfZGV2aWNlX2JhcnMocGRldik7Ci0JaWYgKGxpa2VseShzdWJfYnVzKSkKLQkJaXNlcmll
c19kZXZpY2VfaW5mb3JtYXRpb24ocGRldiwgYnVzLCAqc3ViX2J1cyk7Ci0JZWxzZQotCQlwcmlu
dGsoS0VSTl9FUlIgIlBDSTogRGV2aWNlIG5vZGUgJXMgaGFzIG1pc3Npbmcgb3IgaW52YWxpZCAi
Ci0JCQkJImxpbnV4LHN1YmJ1cyBwcm9wZXJ0eVxuIiwgbm9kZS0+ZnVsbF9uYW1lKTsKLX0KLQot
LyoKLSAqIGlTZXJpZXNfcGNpX2ZpbmFsX2ZpeHVwKHZvaWQpCi0gKi8KLXZvaWQgX19pbml0IGlT
ZXJpZXNfcGNpX2ZpbmFsX2ZpeHVwKHZvaWQpCi17Ci0JLyogRml4IHVwIGF0IHRoZSBkZXZpY2Ug
bm9kZSBhbmQgcGNpX2RldiByZWxhdGlvbnNoaXAgKi8KLQltZl9kaXNwbGF5X3NyYygweEM5MDAw
MTAwKTsKLQlpU2VyaWVzX2FjdGl2YXRlX0lSUXMoKTsKLQltZl9kaXNwbGF5X3NyYygweEM5MDAw
MjAwKTsKLX0KLQotLyoKLSAqIENvbmZpZyBzcGFjZSByZWFkIGFuZCB3cml0ZSBmdW5jdGlvbnMu
Ci0gKiBGb3Igbm93IGF0IGxlYXN0LCB3ZSBsb29rIGZvciB0aGUgZGV2aWNlIG5vZGUgZm9yIHRo
ZSBidXMgYW5kIGRldmZuCi0gKiB0aGF0IHdlIGFyZSBhc2tlZCB0byBhY2Nlc3MuICBJdCBtYXkg
YmUgcG9zc2libGUgdG8gdHJhbnNsYXRlIHRoZSBkZXZmbgotICogdG8gYSBzdWJidXMgYW5kIGRl
dmljZWlkIG1vcmUgZGlyZWN0bHkuCi0gKi8KLXN0YXRpYyB1NjQgaHZfY2ZnX3JlYWRfZnVuY1s0
XSAgPSB7Ci0JSHZDYWxsUGNpQ29uZmlnTG9hZDgsIEh2Q2FsbFBjaUNvbmZpZ0xvYWQxNiwKLQlI
dkNhbGxQY2lDb25maWdMb2FkMzIsIEh2Q2FsbFBjaUNvbmZpZ0xvYWQzMgotfTsKLQotc3RhdGlj
IHU2NCBodl9jZmdfd3JpdGVfZnVuY1s0XSA9IHsKLQlIdkNhbGxQY2lDb25maWdTdG9yZTgsIEh2
Q2FsbFBjaUNvbmZpZ1N0b3JlMTYsCi0JSHZDYWxsUGNpQ29uZmlnU3RvcmUzMiwgSHZDYWxsUGNp
Q29uZmlnU3RvcmUzMgotfTsKLQotLyoKLSAqIFJlYWQgUENJIGNvbmZpZyBzcGFjZQotICovCi1z
dGF0aWMgaW50IGlTZXJpZXNfcGNpX3JlYWRfY29uZmlnKHN0cnVjdCBwY2lfYnVzICpidXMsIHVu
c2lnbmVkIGludCBkZXZmbiwKLQkJaW50IG9mZnNldCwgaW50IHNpemUsIHUzMiAqdmFsKQotewot
CXN0cnVjdCBkZXZpY2Vfbm9kZSAqbm9kZSA9IGZpbmRfZGV2aWNlX25vZGUoYnVzLT5udW1iZXIs
IGRldmZuKTsKLQl1NjQgZm47Ci0Jc3RydWN0IEh2Q2FsbFBjaV9Mb2FkUmV0dXJuIHJldDsKLQot
CWlmIChub2RlID09IE5VTEwpCi0JCXJldHVybiBQQ0lCSU9TX0RFVklDRV9OT1RfRk9VTkQ7Ci0J
aWYgKG9mZnNldCA+IDI1NSkgewotCQkqdmFsID0gfjA7Ci0JCXJldHVybiBQQ0lCSU9TX0JBRF9S
RUdJU1RFUl9OVU1CRVI7Ci0JfQotCi0JZm4gPSBodl9jZmdfcmVhZF9mdW5jWyhzaXplIC0gMSkg
JiAzXTsKLQlIdkNhbGwzUmV0MTYoZm4sICZyZXQsIGlzZXJpZXNfZHNfYWRkcihub2RlKSwgb2Zm
c2V0LCAwKTsKLQotCWlmIChyZXQucmMgIT0gMCkgewotCQkqdmFsID0gfjA7Ci0JCXJldHVybiBQ
Q0lCSU9TX0RFVklDRV9OT1RfRk9VTkQ7CS8qIG9yIHNvbWV0aGluZyAqLwotCX0KLQotCSp2YWwg
PSByZXQudmFsdWU7Ci0JcmV0dXJuIDA7Ci19Ci0KLS8qCi0gKiBXcml0ZSBQQ0kgY29uZmlnIHNw
YWNlCi0gKi8KLQotc3RhdGljIGludCBpU2VyaWVzX3BjaV93cml0ZV9jb25maWcoc3RydWN0IHBj
aV9idXMgKmJ1cywgdW5zaWduZWQgaW50IGRldmZuLAotCQlpbnQgb2Zmc2V0LCBpbnQgc2l6ZSwg
dTMyIHZhbCkKLXsKLQlzdHJ1Y3QgZGV2aWNlX25vZGUgKm5vZGUgPSBmaW5kX2RldmljZV9ub2Rl
KGJ1cy0+bnVtYmVyLCBkZXZmbik7Ci0JdTY0IGZuOwotCXU2NCByZXQ7Ci0KLQlpZiAobm9kZSA9
PSBOVUxMKQotCQlyZXR1cm4gUENJQklPU19ERVZJQ0VfTk9UX0ZPVU5EOwotCWlmIChvZmZzZXQg
PiAyNTUpCi0JCXJldHVybiBQQ0lCSU9TX0JBRF9SRUdJU1RFUl9OVU1CRVI7Ci0KLQlmbiA9IGh2
X2NmZ193cml0ZV9mdW5jWyhzaXplIC0gMSkgJiAzXTsKLQlyZXQgPSBIdkNhbGw0KGZuLCBpc2Vy
aWVzX2RzX2FkZHIobm9kZSksIG9mZnNldCwgdmFsLCAwKTsKLQotCWlmIChyZXQgIT0gMCkKLQkJ
cmV0dXJuIFBDSUJJT1NfREVWSUNFX05PVF9GT1VORDsKLQotCXJldHVybiAwOwotfQotCi1zdGF0
aWMgc3RydWN0IHBjaV9vcHMgaVNlcmllc19wY2lfb3BzID0gewotCS5yZWFkID0gaVNlcmllc19w
Y2lfcmVhZF9jb25maWcsCi0JLndyaXRlID0gaVNlcmllc19wY2lfd3JpdGVfY29uZmlnCi19Owot
Ci0vKgotICogQ2hlY2sgUmV0dXJuIENvZGUKLSAqIC0+IE9uIEZhaWx1cmUsIHByaW50IGFuZCBs
b2cgaW5mb3JtYXRpb24uCi0gKiAgICBJbmNyZW1lbnQgUmV0cnkgQ291bnQsIGlmIGV4Y2VlZHMg
bWF4LCBwYW5pYyBwYXJ0aXRpb24uCi0gKgotICogUENJOiBEZXZpY2UgMjMuOTAgUmVhZEwgSS9P
IEVycm9yKCAwKTogMHgxMjM0Ci0gKiBQQ0k6IERldmljZSAyMy45MCBSZWFkTCBSZXRyeSggMSkK
LSAqIFBDSTogRGV2aWNlIDIzLjkwIFJlYWRMIFJldHJ5IFN1Y2Nlc3NmdWwoMSkKLSAqLwotc3Rh
dGljIGludCBjaGVja19yZXR1cm5fY29kZShjaGFyICp0eXBlLCBzdHJ1Y3QgZGV2aWNlX25vZGUg
KmRuLAotCQlpbnQgKnJldHJ5LCB1NjQgcmV0KQotewotCWlmIChyZXQgIT0gMCkgIHsKLQkJc3Ry
dWN0IHBjaV9kbiAqcGRuID0gUENJX0ROKGRuKTsKLQotCQkoKnJldHJ5KSsrOwotCQlwcmludGso
IlBDSTogJXM6IERldmljZSAweCUwNFg6JTAyWCAgSS9PIEVycm9yKCUyZCk6IDB4JTA0WFxuIiwK
LQkJCQl0eXBlLCBwZG4tPmJ1c25vLCBwZG4tPmRldmZuLAotCQkJCSpyZXRyeSwgKGludClyZXQp
OwotCQkvKgotCQkgKiBCdW1wIHRoZSByZXRyeSBhbmQgY2hlY2sgZm9yIHJldHJ5IGNvdW50IGV4
Y2VlZGVkLgotCQkgKiBJZiwgRXhjZWVkZWQsIHBhbmljIHRoZSBzeXN0ZW0uCi0JCSAqLwotCQlp
ZiAoKCgqcmV0cnkpID4gUENJX1JFVFJZX01BWCkgJiYKLQkJCQkobGltaXRfcGNpX3JldHJpZXMg
PiAwKSkgewotCQkJbWZfZGlzcGxheV9zcmMoMHhCNjAwMDEwMyk7Ci0JCQlwYW5pY190aW1lb3V0
ID0gMDsKLQkJCXBhbmljKCJQQ0k6IEhhcmR3YXJlIEkvTyBFcnJvciwgU1JDIEI2MDAwMTAzLCAi
Ci0JCQkJCSJBdXRvbWF0aWMgUmVib290IERpc2FibGVkLlxuIik7Ci0JCX0KLQkJcmV0dXJuIC0x
OwkvKiBSZXRyeSBUcnkgKi8KLQl9Ci0JcmV0dXJuIDA7Ci19Ci0KLS8qCi0gKiBUcmFuc2xhdGUg
dGhlIEkvTyBBZGRyZXNzIGludG8gYSBkZXZpY2Ugbm9kZSwgYmFyLCBhbmQgYmFyIG9mZnNldC4K
LSAqIE5vdGU6IE1ha2Ugc3VyZSB0aGUgcGFzc2VkIHZhcmlhYmxlIGVuZCB1cCBvbiB0aGUgc3Rh
Y2sgdG8gYXZvaWQKLSAqIHRoZSBleHBvc3VyZSBvZiBiZWluZyBkZXZpY2UgZ2xvYmFsLgotICov
Ci1zdGF0aWMgaW5saW5lIHN0cnVjdCBkZXZpY2Vfbm9kZSAqeGxhdGVfaW9tbV9hZGRyZXNzKAot
CQljb25zdCB2b2xhdGlsZSB2b2lkIF9faW9tZW0gKmFkZHIsCi0JCXU2NCAqZHNhcHRyLCB1NjQg
KmJhcl9vZmZzZXQsIGNvbnN0IGNoYXIgKmZ1bmMpCi17Ci0JdW5zaWduZWQgbG9uZyBvcmlnX2Fk
ZHI7Ci0JdW5zaWduZWQgbG9uZyBiYXNlX2FkZHI7Ci0JdW5zaWduZWQgbG9uZyBpbmQ7Ci0Jc3Ry
dWN0IGRldmljZV9ub2RlICpkbjsKLQotCW9yaWdfYWRkciA9ICh1bnNpZ25lZCBsb25nIF9fZm9y
Y2UpYWRkcjsKLQlpZiAoKG9yaWdfYWRkciA8IEJBU0VfSU9fTUVNT1JZKSB8fCAob3JpZ19hZGRy
ID49IG1heF9pb19tZW1vcnkpKSB7Ci0JCXN0YXRpYyBERUZJTkVfUkFURUxJTUlUX1NUQVRFKHJh
dGVsaW1pdCwgNjAgKiBIWiwgMTApOwotCi0JCWlmIChfX3JhdGVsaW1pdCgmcmF0ZWxpbWl0KSkK
LQkJCXByaW50ayhLRVJOX0VSUgotCQkJCSJpU2VyaWVzXyVzOiBpbnZhbGlkIGFjY2VzcyBhdCBJ
TyBhZGRyZXNzICVwXG4iLAotCQkJCWZ1bmMsIGFkZHIpOwotCQlyZXR1cm4gTlVMTDsKLQl9Ci0J
YmFzZV9hZGRyID0gb3JpZ19hZGRyIC0gQkFTRV9JT19NRU1PUlk7Ci0JaW5kID0gYmFzZV9hZGRy
IC8gSU9NTV9UQUJMRV9FTlRSWV9TSVpFOwotCWRuID0gaW9tbV90YWJsZVtpbmRdOwotCi0JaWYg
KGRuICE9IE5VTEwpIHsKLQkJKmRzYXB0ciA9IGRzX2FkZHJfdGFibGVbaW5kXTsKLQkJKmJhcl9v
ZmZzZXQgPSBiYXNlX2FkZHIgJSBJT01NX1RBQkxFX0VOVFJZX1NJWkU7Ci0JfSBlbHNlCi0JCXBh
bmljKCJQQ0k6IEludmFsaWQgUENJIElPIGFkZHJlc3MgZGV0ZWN0ZWQhXG4iKTsKLQlyZXR1cm4g
ZG47Ci19Ci0KLS8qCi0gKiBSZWFkIE1NIEkvTyBJbnN0cnVjdGlvbnMgZm9yIHRoZSBpU2VyaWVz
Ci0gKiBPbiBNTSBJL08gZXJyb3IsIGFsbCBvbmVzIGFyZSByZXR1cm5lZCBhbmQgaVNlcmllc19w
Y2lfSW9FcnJvciBpcyBjYWwKLSAqIGVsc2UsIGRhdGEgaXMgcmV0dXJuZWQgaW4gQmlnIEVuZGlh
biBmb3JtYXQuCi0gKi8KLXN0YXRpYyB1OCBpc2VyaWVzX3JlYWRiKGNvbnN0IHZvbGF0aWxlIHZv
aWQgX19pb21lbSAqYWRkcikKLXsKLQl1NjQgYmFyX29mZnNldDsKLQl1NjQgZHNhOwotCWludCBy
ZXRyeSA9IDA7Ci0Jc3RydWN0IEh2Q2FsbFBjaV9Mb2FkUmV0dXJuIHJldDsKLQlzdHJ1Y3QgZGV2
aWNlX25vZGUgKmRuID0KLQkJeGxhdGVfaW9tbV9hZGRyZXNzKGFkZHIsICZkc2EsICZiYXJfb2Zm
c2V0LCAicmVhZF9ieXRlIik7Ci0KLQlpZiAoZG4gPT0gTlVMTCkKLQkJcmV0dXJuIDB4ZmY7Ci0J
ZG8gewotCQlIdkNhbGwzUmV0MTYoSHZDYWxsUGNpQmFyTG9hZDgsICZyZXQsIGRzYSwgYmFyX29m
ZnNldCwgMCk7Ci0JfSB3aGlsZSAoY2hlY2tfcmV0dXJuX2NvZGUoIlJEQiIsIGRuLCAmcmV0cnks
IHJldC5yYykgIT0gMCk7Ci0KLQlyZXR1cm4gcmV0LnZhbHVlOwotfQotCi1zdGF0aWMgdTE2IGlz
ZXJpZXNfcmVhZHdfYmUoY29uc3Qgdm9sYXRpbGUgdm9pZCBfX2lvbWVtICphZGRyKQotewotCXU2
NCBiYXJfb2Zmc2V0OwotCXU2NCBkc2E7Ci0JaW50IHJldHJ5ID0gMDsKLQlzdHJ1Y3QgSHZDYWxs
UGNpX0xvYWRSZXR1cm4gcmV0OwotCXN0cnVjdCBkZXZpY2Vfbm9kZSAqZG4gPQotCQl4bGF0ZV9p
b21tX2FkZHJlc3MoYWRkciwgJmRzYSwgJmJhcl9vZmZzZXQsICJyZWFkX3dvcmQiKTsKLQotCWlm
IChkbiA9PSBOVUxMKQotCQlyZXR1cm4gMHhmZmZmOwotCWRvIHsKLQkJSHZDYWxsM1JldDE2KEh2
Q2FsbFBjaUJhckxvYWQxNiwgJnJldCwgZHNhLAotCQkJCWJhcl9vZmZzZXQsIDApOwotCX0gd2hp
bGUgKGNoZWNrX3JldHVybl9jb2RlKCJSRFciLCBkbiwgJnJldHJ5LCByZXQucmMpICE9IDApOwot
Ci0JcmV0dXJuIHJldC52YWx1ZTsKLX0KLQotc3RhdGljIHUzMiBpc2VyaWVzX3JlYWRsX2JlKGNv
bnN0IHZvbGF0aWxlIHZvaWQgX19pb21lbSAqYWRkcikKLXsKLQl1NjQgYmFyX29mZnNldDsKLQl1
NjQgZHNhOwotCWludCByZXRyeSA9IDA7Ci0Jc3RydWN0IEh2Q2FsbFBjaV9Mb2FkUmV0dXJuIHJl
dDsKLQlzdHJ1Y3QgZGV2aWNlX25vZGUgKmRuID0KLQkJeGxhdGVfaW9tbV9hZGRyZXNzKGFkZHIs
ICZkc2EsICZiYXJfb2Zmc2V0LCAicmVhZF9sb25nIik7Ci0KLQlpZiAoZG4gPT0gTlVMTCkKLQkJ
cmV0dXJuIDB4ZmZmZmZmZmY7Ci0JZG8gewotCQlIdkNhbGwzUmV0MTYoSHZDYWxsUGNpQmFyTG9h
ZDMyLCAmcmV0LCBkc2EsCi0JCQkJYmFyX29mZnNldCwgMCk7Ci0JfSB3aGlsZSAoY2hlY2tfcmV0
dXJuX2NvZGUoIlJETCIsIGRuLCAmcmV0cnksIHJldC5yYykgIT0gMCk7Ci0KLQlyZXR1cm4gcmV0
LnZhbHVlOwotfQotCi0vKgotICogV3JpdGUgTU0gSS9PIEluc3RydWN0aW9ucyBmb3IgdGhlIGlT
ZXJpZXMKLSAqCi0gKi8KLXN0YXRpYyB2b2lkIGlzZXJpZXNfd3JpdGViKHU4IGRhdGEsIHZvbGF0
aWxlIHZvaWQgX19pb21lbSAqYWRkcikKLXsKLQl1NjQgYmFyX29mZnNldDsKLQl1NjQgZHNhOwot
CWludCByZXRyeSA9IDA7Ci0JdTY0IHJjOwotCXN0cnVjdCBkZXZpY2Vfbm9kZSAqZG4gPQotCQl4
bGF0ZV9pb21tX2FkZHJlc3MoYWRkciwgJmRzYSwgJmJhcl9vZmZzZXQsICJ3cml0ZV9ieXRlIik7
Ci0KLQlpZiAoZG4gPT0gTlVMTCkKLQkJcmV0dXJuOwotCWRvIHsKLQkJcmMgPSBIdkNhbGw0KEh2
Q2FsbFBjaUJhclN0b3JlOCwgZHNhLCBiYXJfb2Zmc2V0LCBkYXRhLCAwKTsKLQl9IHdoaWxlIChj
aGVja19yZXR1cm5fY29kZSgiV1dCIiwgZG4sICZyZXRyeSwgcmMpICE9IDApOwotfQotCi1zdGF0
aWMgdm9pZCBpc2VyaWVzX3dyaXRld19iZSh1MTYgZGF0YSwgdm9sYXRpbGUgdm9pZCBfX2lvbWVt
ICphZGRyKQotewotCXU2NCBiYXJfb2Zmc2V0OwotCXU2NCBkc2E7Ci0JaW50IHJldHJ5ID0gMDsK
LQl1NjQgcmM7Ci0Jc3RydWN0IGRldmljZV9ub2RlICpkbiA9Ci0JCXhsYXRlX2lvbW1fYWRkcmVz
cyhhZGRyLCAmZHNhLCAmYmFyX29mZnNldCwgIndyaXRlX3dvcmQiKTsKLQotCWlmIChkbiA9PSBO
VUxMKQotCQlyZXR1cm47Ci0JZG8gewotCQlyYyA9IEh2Q2FsbDQoSHZDYWxsUGNpQmFyU3RvcmUx
NiwgZHNhLCBiYXJfb2Zmc2V0LCBkYXRhLCAwKTsKLQl9IHdoaWxlIChjaGVja19yZXR1cm5fY29k
ZSgiV1dXIiwgZG4sICZyZXRyeSwgcmMpICE9IDApOwotfQotCi1zdGF0aWMgdm9pZCBpc2VyaWVz
X3dyaXRlbF9iZSh1MzIgZGF0YSwgdm9sYXRpbGUgdm9pZCBfX2lvbWVtICphZGRyKQotewotCXU2
NCBiYXJfb2Zmc2V0OwotCXU2NCBkc2E7Ci0JaW50IHJldHJ5ID0gMDsKLQl1NjQgcmM7Ci0Jc3Ry
dWN0IGRldmljZV9ub2RlICpkbiA9Ci0JCXhsYXRlX2lvbW1fYWRkcmVzcyhhZGRyLCAmZHNhLCAm
YmFyX29mZnNldCwgIndyaXRlX2xvbmciKTsKLQotCWlmIChkbiA9PSBOVUxMKQotCQlyZXR1cm47
Ci0JZG8gewotCQlyYyA9IEh2Q2FsbDQoSHZDYWxsUGNpQmFyU3RvcmUzMiwgZHNhLCBiYXJfb2Zm
c2V0LCBkYXRhLCAwKTsKLQl9IHdoaWxlIChjaGVja19yZXR1cm5fY29kZSgiV1dMIiwgZG4sICZy
ZXRyeSwgcmMpICE9IDApOwotfQotCi1zdGF0aWMgdTE2IGlzZXJpZXNfcmVhZHcoY29uc3Qgdm9s
YXRpbGUgdm9pZCBfX2lvbWVtICphZGRyKQotewotCXJldHVybiBsZTE2X3RvX2NwdShpc2VyaWVz
X3JlYWR3X2JlKGFkZHIpKTsKLX0KLQotc3RhdGljIHUzMiBpc2VyaWVzX3JlYWRsKGNvbnN0IHZv
bGF0aWxlIHZvaWQgX19pb21lbSAqYWRkcikKLXsKLQlyZXR1cm4gbGUzMl90b19jcHUoaXNlcmll
c19yZWFkbF9iZShhZGRyKSk7Ci19Ci0KLXN0YXRpYyB2b2lkIGlzZXJpZXNfd3JpdGV3KHUxNiBk
YXRhLCB2b2xhdGlsZSB2b2lkIF9faW9tZW0gKmFkZHIpCi17Ci0JaXNlcmllc193cml0ZXdfYmUo
Y3B1X3RvX2xlMTYoZGF0YSksIGFkZHIpOwotfQotCi1zdGF0aWMgdm9pZCBpc2VyaWVzX3dyaXRl
bCh1MzIgZGF0YSwgdm9sYXRpbGUgdm9pZCBfX2lvbWVtICphZGRyKQotewotCWlzZXJpZXNfd3Jp
dGVsKGNwdV90b19sZTMyKGRhdGEpLCBhZGRyKTsKLX0KLQotc3RhdGljIHZvaWQgaXNlcmllc19y
ZWFkc2IoY29uc3Qgdm9sYXRpbGUgdm9pZCBfX2lvbWVtICphZGRyLCB2b2lkICpidWYsCi0JCQkg
ICB1bnNpZ25lZCBsb25nIGNvdW50KQotewotCXU4ICpkc3QgPSBidWY7Ci0Jd2hpbGUoY291bnQt
LSA+IDApCi0JCSooZHN0KyspID0gaXNlcmllc19yZWFkYihhZGRyKTsKLX0KLQotc3RhdGljIHZv
aWQgaXNlcmllc19yZWFkc3coY29uc3Qgdm9sYXRpbGUgdm9pZCBfX2lvbWVtICphZGRyLCB2b2lk
ICpidWYsCi0JCQkgICB1bnNpZ25lZCBsb25nIGNvdW50KQotewotCXUxNiAqZHN0ID0gYnVmOwot
CXdoaWxlKGNvdW50LS0gPiAwKQotCQkqKGRzdCsrKSA9IGlzZXJpZXNfcmVhZHdfYmUoYWRkcik7
Ci19Ci0KLXN0YXRpYyB2b2lkIGlzZXJpZXNfcmVhZHNsKGNvbnN0IHZvbGF0aWxlIHZvaWQgX19p
b21lbSAqYWRkciwgdm9pZCAqYnVmLAotCQkJICAgdW5zaWduZWQgbG9uZyBjb3VudCkKLXsKLQl1
MzIgKmRzdCA9IGJ1ZjsKLQl3aGlsZShjb3VudC0tID4gMCkKLQkJKihkc3QrKykgPSBpc2VyaWVz
X3JlYWRsX2JlKGFkZHIpOwotfQotCi1zdGF0aWMgdm9pZCBpc2VyaWVzX3dyaXRlc2Iodm9sYXRp
bGUgdm9pZCBfX2lvbWVtICphZGRyLCBjb25zdCB2b2lkICpidWYsCi0JCQkgICAgdW5zaWduZWQg
bG9uZyBjb3VudCkKLXsKLQljb25zdCB1OCAqc3JjID0gYnVmOwotCXdoaWxlKGNvdW50LS0gPiAw
KQotCQlpc2VyaWVzX3dyaXRlYigqKHNyYysrKSwgYWRkcik7Ci19Ci0KLXN0YXRpYyB2b2lkIGlz
ZXJpZXNfd3JpdGVzdyh2b2xhdGlsZSB2b2lkIF9faW9tZW0gKmFkZHIsIGNvbnN0IHZvaWQgKmJ1
ZiwKLQkJCSAgICB1bnNpZ25lZCBsb25nIGNvdW50KQotewotCWNvbnN0IHUxNiAqc3JjID0gYnVm
OwotCXdoaWxlKGNvdW50LS0gPiAwKQotCQlpc2VyaWVzX3dyaXRld19iZSgqKHNyYysrKSwgYWRk
cik7Ci19Ci0KLXN0YXRpYyB2b2lkIGlzZXJpZXNfd3JpdGVzbCh2b2xhdGlsZSB2b2lkIF9faW9t
ZW0gKmFkZHIsIGNvbnN0IHZvaWQgKmJ1ZiwKLQkJCSAgICB1bnNpZ25lZCBsb25nIGNvdW50KQot
ewotCWNvbnN0IHUzMiAqc3JjID0gYnVmOwotCXdoaWxlKGNvdW50LS0gPiAwKQotCQlpc2VyaWVz
X3dyaXRlbF9iZSgqKHNyYysrKSwgYWRkcik7Ci19Ci0KLXN0YXRpYyB2b2lkIGlzZXJpZXNfbWVt
c2V0X2lvKHZvbGF0aWxlIHZvaWQgX19pb21lbSAqYWRkciwgaW50IGMsCi0JCQkgICAgICB1bnNp
Z25lZCBsb25nIG4pCi17Ci0Jdm9sYXRpbGUgY2hhciBfX2lvbWVtICpkID0gYWRkcjsKLQotCXdo
aWxlIChuLS0gPiAwKQotCQlpc2VyaWVzX3dyaXRlYihjLCBkKyspOwotfQotCi1zdGF0aWMgdm9p
ZCBpc2VyaWVzX21lbWNweV9mcm9taW8odm9pZCAqZGVzdCwgY29uc3Qgdm9sYXRpbGUgdm9pZCBf
X2lvbWVtICpzcmMsCi0JCQkJICB1bnNpZ25lZCBsb25nIG4pCi17Ci0JY2hhciAqZCA9IGRlc3Q7
Ci0JY29uc3Qgdm9sYXRpbGUgY2hhciBfX2lvbWVtICpzID0gc3JjOwotCi0Jd2hpbGUgKG4tLSA+
IDApCi0JCSpkKysgPSBpc2VyaWVzX3JlYWRiKHMrKyk7Ci19Ci0KLXN0YXRpYyB2b2lkIGlzZXJp
ZXNfbWVtY3B5X3RvaW8odm9sYXRpbGUgdm9pZCBfX2lvbWVtICpkZXN0LCBjb25zdCB2b2lkICpz
cmMsCi0JCQkJdW5zaWduZWQgbG9uZyBuKQotewotCWNvbnN0IGNoYXIgKnMgPSBzcmM7Ci0Jdm9s
YXRpbGUgY2hhciBfX2lvbWVtICpkID0gZGVzdDsKLQotCXdoaWxlIChuLS0gPiAwKQotCQlpc2Vy
aWVzX3dyaXRlYigqcysrLCBkKyspOwotfQotCi0vKiBXZSBvbmx5IHNldCBNTUlPIG9wcy4gVGhl
IGRlZmF1bHQgUElPIG9wcyB3aWxsIGJlIGRlZmF1bHQKLSAqIHRvIHRoZSBNTUlPIG9wcyArIHBj
aV9pb19iYXNlIHdoaWNoIGlzIDAgb24gaVNlcmllcyBhcwotICogZXhwZWN0ZWQgc28gYm90aCBz
aG91bGQgd29yay4KLSAqCi0gKiBOb3RlIHRoYXQgd2UgZG9uJ3QgaW1wbGVtZW50IHRoZSByZWFk
cS93cml0ZXEgdmVyc2lvbnMgYXMKLSAqIEkgZG9uJ3Qga25vdyBvZiBhbiBIViBjYWxsIGZvciBk
b2luZyBzby4gVGh1cywgdGhlIGRlZmF1bHQKLSAqIG9wZXJhdGlvbiB3aWxsIGJlIHVzZWQgaW5z
dGVhZCwgd2hpY2ggd2lsbCBmYXVsdCBhIHRoZSB2YWx1ZQotICogcmV0dXJuIGJ5IGlTZXJpZXMg
Zm9yIE1NSU8gYWRkcmVzc2VzIGFsd2F5cyBoaXRzIGEgbm9uIG1hcHBlZAotICogYXJlYS4gVGhp
cyBpcyBhcyBnb29kIGFzIHRoZSBCVUcoKSB3ZSB1c2VkIHRvIGhhdmUgdGhlcmUuCi0gKi8KLXN0
YXRpYyBzdHJ1Y3QgcHBjX3BjaV9pbyBfX2luaXRkYXRhIGlzZXJpZXNfcGNpX2lvID0gewotCS5y
ZWFkYiA9IGlzZXJpZXNfcmVhZGIsCi0JLnJlYWR3ID0gaXNlcmllc19yZWFkdywKLQkucmVhZGwg
PSBpc2VyaWVzX3JlYWRsLAotCS5yZWFkd19iZSA9IGlzZXJpZXNfcmVhZHdfYmUsCi0JLnJlYWRs
X2JlID0gaXNlcmllc19yZWFkbF9iZSwKLQkud3JpdGViID0gaXNlcmllc193cml0ZWIsCi0JLndy
aXRldyA9IGlzZXJpZXNfd3JpdGV3LAotCS53cml0ZWwgPSBpc2VyaWVzX3dyaXRlbCwKLQkud3Jp
dGV3X2JlID0gaXNlcmllc193cml0ZXdfYmUsCi0JLndyaXRlbF9iZSA9IGlzZXJpZXNfd3JpdGVs
X2JlLAotCS5yZWFkc2IgPSBpc2VyaWVzX3JlYWRzYiwKLQkucmVhZHN3ID0gaXNlcmllc19yZWFk
c3csCi0JLnJlYWRzbCA9IGlzZXJpZXNfcmVhZHNsLAotCS53cml0ZXNiID0gaXNlcmllc193cml0
ZXNiLAotCS53cml0ZXN3ID0gaXNlcmllc193cml0ZXN3LAotCS53cml0ZXNsID0gaXNlcmllc193
cml0ZXNsLAotCS5tZW1zZXRfaW8gPSBpc2VyaWVzX21lbXNldF9pbywKLQkubWVtY3B5X2Zyb21p
byA9IGlzZXJpZXNfbWVtY3B5X2Zyb21pbywKLQkubWVtY3B5X3RvaW8gPSBpc2VyaWVzX21lbWNw
eV90b2lvLAotfTsKLQotLyoKLSAqIGlTZXJpZXNfcGNpYmlvc19pbml0Ci0gKgotICogRGVzY3Jp
cHRpb246Ci0gKiAgIFRoaXMgZnVuY3Rpb24gY2hlY2tzIGZvciBhbGwgcG9zc2libGUgc3lzdGVt
IFBDSSBob3N0IGJyaWRnZXMgdGhhdCBjb25uZWN0Ci0gKiAgIFBDSSBidXNlcy4gIFRoZSBzeXN0
ZW0gaHlwZXJ2aXNvciBpcyBxdWVyaWVkIGFzIHRvIHRoZSBndWVzdCBwYXJ0aXRpb24KLSAqICAg
b3duZXJzaGlwIHN0YXR1cy4gIEEgcGNpX2NvbnRyb2xsZXIgaXMgYnVpbHQgZm9yIGFueSBidXMg
d2hpY2ggaXMgcGFydGlhbGx5Ci0gKiAgIG93bmVkIG9yIGZ1bGx5IG93bmVkIGJ5IHRoaXMgZ3Vl
c3QgcGFydGl0aW9uLgotICovCi12b2lkIF9faW5pdCBpU2VyaWVzX3BjaWJpb3NfaW5pdCh2b2lk
KQotewotCXN0cnVjdCBwY2lfY29udHJvbGxlciAqcGhiOwotCXN0cnVjdCBkZXZpY2Vfbm9kZSAq
cm9vdCA9IG9mX2ZpbmRfbm9kZV9ieV9wYXRoKCIvIik7Ci0Jc3RydWN0IGRldmljZV9ub2RlICpu
b2RlID0gTlVMTDsKLQotCS8qIEluc3RhbGwgSU8gaG9va3MgKi8KLQlwcGNfcGNpX2lvID0gaXNl
cmllc19wY2lfaW87Ci0KLQlwY2lfYWRkX2ZsYWdzKFBDSV9QUk9CRV9PTkxZKTsKLQotCS8qIGlT
ZXJpZXMgaGFzIG5vIElPIHNwYWNlIGluIHRoZSBjb21tb24gc2Vuc2UsIGl0IG5lZWRzIHRvIHNl
dAotCSAqIHRoZSBJTyBiYXNlIHRvIDAKLQkgKi8KLQlwY2lfaW9fYmFzZSA9IDA7Ci0KLQlpZiAo
cm9vdCA9PSBOVUxMKSB7Ci0JCXByaW50ayhLRVJOX0NSSVQgImlTZXJpZXNfcGNpYmlvc19pbml0
OiBjYW4ndCBmaW5kIHJvb3QgIgotCQkJCSJvZiBkZXZpY2UgdHJlZVxuIik7Ci0JCXJldHVybjsK
LQl9Ci0Jd2hpbGUgKChub2RlID0gb2ZfZ2V0X25leHRfY2hpbGQocm9vdCwgbm9kZSkpICE9IE5V
TEwpIHsKLQkJSHZCdXNOdW1iZXIgYnVzOwotCQljb25zdCB1MzIgKmJ1c3A7Ci0KLQkJaWYgKChu
b2RlLT50eXBlID09IE5VTEwpIHx8IChzdHJjbXAobm9kZS0+dHlwZSwgInBjaSIpICE9IDApKQot
CQkJY29udGludWU7Ci0KLQkJYnVzcCA9IG9mX2dldF9wcm9wZXJ0eShub2RlLCAiYnVzLXJhbmdl
IiwgTlVMTCk7Ci0JCWlmIChidXNwID09IE5VTEwpCi0JCQljb250aW51ZTsKLQkJYnVzID0gKmJ1
c3A7Ci0JCXByaW50aygiYnVzICVkIGFwcGVhcnMgdG8gZXhpc3RcbiIsIGJ1cyk7Ci0JCXBoYiA9
IHBjaWJpb3NfYWxsb2NfY29udHJvbGxlcihub2RlKTsKLQkJaWYgKHBoYiA9PSBOVUxMKQotCQkJ
Y29udGludWU7Ci0JCS8qIEFsbCBsZWdhY3kgaVNlcmllcyBQSEJzIGFyZSBpbiBkb21haW4gemVy
byAqLwotCQlwaGItPmdsb2JhbF9udW1iZXIgPSAwOwotCi0JCXBoYi0+Zmlyc3RfYnVzbm8gPSBi
dXM7Ci0JCXBoYi0+bGFzdF9idXNubyA9IGJ1czsKLQkJcGhiLT5vcHMgPSAmaVNlcmllc19wY2lf
b3BzOwotCQlwaGItPmlvX2Jhc2VfdmlydCA9ICh2b2lkIF9faW9tZW0gKilfSU9fQkFTRTsKLQkJ
cGhiLT5pb19yZXNvdXJjZS5mbGFncyA9IElPUkVTT1VSQ0VfSU87Ci0JCXBoYi0+aW9fcmVzb3Vy
Y2Uuc3RhcnQgPSBCQVNFX0lPX01FTU9SWTsKLQkJcGhiLT5pb19yZXNvdXJjZS5lbmQgPSBFTkRf
SU9fTUVNT1JZOwotCQlwaGItPmlvX3Jlc291cmNlLm5hbWUgPSAiaVNlcmllcyBQQ0kgSU8iOwot
CQlwaGItPm1lbV9yZXNvdXJjZXNbMF0uZmxhZ3MgPSBJT1JFU09VUkNFX01FTTsKLQkJcGhiLT5t
ZW1fcmVzb3VyY2VzWzBdLnN0YXJ0ID0gQkFTRV9JT19NRU1PUlk7Ci0JCXBoYi0+bWVtX3Jlc291
cmNlc1swXS5lbmQgPSBFTkRfSU9fTUVNT1JZOwotCQlwaGItPm1lbV9yZXNvdXJjZXNbMF0ubmFt
ZSA9ICJTZXJpZXMgUENJIE1FTSI7Ci0JfQotCi0Jb2Zfbm9kZV9wdXQocm9vdCk7Ci0KLQlwY2lf
ZGV2c19waGJfaW5pdCgpOwotfQotCkluZGV4OiBsaW51eC0yLjYvaW5jbHVkZS9saW51eC9wY2ku
aAo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09Ci0tLSBsaW51eC0yLjYub3JpZy9pbmNsdWRlL2xpbnV4L3BjaS5oCisrKyBs
aW51eC0yLjYvaW5jbHVkZS9saW51eC9wY2kuaApAQCAtOTQ3LDcgKzk0Nyw2IEBAIGludCBfX211
c3RfY2hlY2sgX19wY2lfcmVnaXN0ZXJfZHJpdmVyKHMKIAlfX3BjaV9yZWdpc3Rlcl9kcml2ZXIo
ZHJpdmVyLCBUSElTX01PRFVMRSwgS0JVSUxEX01PRE5BTUUpCiAKIHZvaWQgcGNpX3VucmVnaXN0
ZXJfZHJpdmVyKHN0cnVjdCBwY2lfZHJpdmVyICpkZXYpOwotPDw8PDw8PCBIRUFECiAKIC8qKgog
ICogbW9kdWxlX3BjaV9kcml2ZXIoKSAtIEhlbHBlciBtYWNybyBmb3IgcmVnaXN0ZXJpbmcgYSBQ
Q0kgZHJpdmVyCkBAIC05NjEsMTAgKzk2MCw3IEBAIHZvaWQgcGNpX3VucmVnaXN0ZXJfZHJpdmVy
KHN0cnVjdCBwY2lfZHIKIAltb2R1bGVfZHJpdmVyKF9fcGNpX2RyaXZlciwgcGNpX3JlZ2lzdGVy
X2RyaXZlciwgXAogCQkgICAgICAgcGNpX3VucmVnaXN0ZXJfZHJpdmVyKQogCi12b2lkIHBjaV9y
ZW1vdmVfYmVoaW5kX2JyaWRnZShzdHJ1Y3QgcGNpX2RldiAqZGV2KTsKLT09PT09PT0KIHZvaWQg
cGNpX3N0b3BfYW5kX3JlbW92ZV9iZWhpbmRfYnJpZGdlKHN0cnVjdCBwY2lfZGV2ICpkZXYpOwot
Pj4+Pj4+PiBwY2kvbGludXgtbmV4dAogc3RydWN0IHBjaV9kcml2ZXIgKnBjaV9kZXZfZHJpdmVy
KGNvbnN0IHN0cnVjdCBwY2lfZGV2ICpkZXYpOwogaW50IHBjaV9hZGRfZHluaWQoc3RydWN0IHBj
aV9kcml2ZXIgKmRydiwKIAkJICB1bnNpZ25lZCBpbnQgdmVuZG9yLCB1bnNpZ25lZCBpbnQgZGV2
aWNlLAo=
--047d7b2eded39014da04bbee73ee--
