Received: with ECARTIS (v1.0.0; list linux-mips); Sun, 17 Jun 2007 14:37:58 +0100 (BST)
Received: from py-out-1112.google.com ([64.233.166.177]:30678 "EHLO
	py-out-1112.google.com") by ftp.linux-mips.org with ESMTP
	id S20022903AbXFQNhz (ORCPT <rfc822;linux-mips@linux-mips.org>);
	Sun, 17 Jun 2007 14:37:55 +0100
Received: by py-out-1112.google.com with SMTP id f31so2708650pyh
        for <linux-mips@linux-mips.org>; Sun, 17 Jun 2007 06:36:53 -0700 (PDT)
DKIM-Signature:	a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=jVVk35wTIvPDOdQ1J+MBWbi9+RYVF3v/GbKQ8EwBdnFFA4eNIGyVi9tE9nH9dlg7XRyTON02LtYW6stTLdyxGqm+/5nNJFllGaMVAygz8FL9nkfHLlcFb1qVyPmAysOv8R3EbeGZbqOd6T6q/6pUvwCCBsCvgPNz9nBswiI3zFM=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=GZaaNkYYE11Ts6GqDa3wlxSLmEITR82gWdIoQAey6qUV6iPXbC0PYOK4KCVp9gJ2Sz8oNsD/pjfV1kxWbFcFEyAmenwclW0whIZSFKye8U7ud6I578qXzhqEmf629jBpYjTdVehixGLVBD3RjCXuRLSqfOKlYZso00+VWhNrT/4=
Received: by 10.65.135.19 with SMTP id m19mr7647495qbn.1182087413219;
        Sun, 17 Jun 2007 06:36:53 -0700 (PDT)
Received: by 10.65.204.8 with HTTP; Sun, 17 Jun 2007 06:36:53 -0700 (PDT)
Message-ID: <cda58cb80706170636kbff000cw849fa1d5ccf31152@mail.gmail.com>
Date:	Sun, 17 Jun 2007 15:36:53 +0200
From:	"Franck Bui-Huu" <vagabon.xyz@gmail.com>
To:	"Ralf Baechle" <ralf@linux-mips.org>,
	"Maciej W. Rozycki" <macro@linux-mips.org>
Subject: Re: [PATCH 3/5] Deforest the function pointer jungle in the time code.
Cc:	"Sergei Shtylyov" <sshtylyov@ru.mvista.com>,
	linux-mips@linux-mips.org
In-Reply-To: <20070615134948.GB16133@linux-mips.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_62815_6606188.1182087413124"
References: <11818164011355-git-send-email-fbuihuu@gmail.com>
	 <11818164023940-git-send-email-fbuihuu@gmail.com>
	 <20070614111748.GA8223@alpha.franken.de>
	 <cda58cb80706140643g63c3bf34sbd5b843a15653c3d@mail.gmail.com>
	 <Pine.LNX.4.64N.0706141501080.25868@blysk.ds.pg.gda.pl>
	 <cda58cb80706140731j1b6e8e36l96d4423db1ffd9e7@mail.gmail.com>
	 <Pine.LNX.4.64N.0706141648540.25868@blysk.ds.pg.gda.pl>
	 <cda58cb80706150159j5c3d5b7p4293dc529d5ee97c@mail.gmail.com>
	 <20070615134948.GB16133@linux-mips.org>
Return-Path: <vagabon.xyz@gmail.com>
X-Envelope-To: <"|/home/ecartis/ecartis -s linux-mips"> (uid 0)
X-Orcpt: rfc822;linux-mips@linux-mips.org
Original-Recipient: rfc822;linux-mips@linux-mips.org
X-archive-position: 15436
X-ecartis-version: Ecartis v1.0.0
Sender: linux-mips-bounce@linux-mips.org
Errors-to: linux-mips-bounce@linux-mips.org
X-original-sender: vagabon.xyz@gmail.com
Precedence: bulk
X-list: linux-mips

------=_Part_62815_6606188.1182087413124
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 6/15/07, Ralf Baechle <ralf@linux-mips.org> wrote:
> On Fri, Jun 15, 2007 at 10:59:00AM +0200, Franck Bui-Huu wrote:
>
> > > Please note that this generic calibration code may be used for
> > >calibrating the CP0 timer too -- all that you need is defining
> >
> > Actually the current patchset breaks it since it changes the calibration
> > code to be used only for the cp0 hpt calibration. I'll change that.
>
> To many this really fun it also needs to become possible to calibrate
> each processor's clock individually - not all MIPS MP systems run their
> clocks at the same rate.
>

OK I've updated patch 5/5, taking into account several raised points.
First of all I put the cp0 hpt clock driver into a file named
"hpt-cp0.c". Therefore there should be no more ambiguties on what
we're taking about. Moreover if a platform needs a new hpt clock
driver it could call it "hpt-foo.c". BTW, Ralf, you made such a driver
for 'i8253' device, can we rename it "hpt-i8253.c" ?

The interface should be simple enough to let all platforms do what
they want without any complexities or hacks. It should be also now
possible to read from platform code and easily understand what they
do/need.

For example for DEC, this should result into:

unsigned dec_calibrate_timer(int cpu)
{
        <...>
        ralf_generic_calibrate_timer(cpu); /* ;) */
        <...>
}

void plat_timer_setup(void)
{
	setup_ds1287_timer();	/* implemented in hpt-ds1287.c ? */

	if (cpu_has_counter) {
		struct cp0_hpt_info info;

		info.get_freq = dec_calibrate_timer;
		info.irq = dec_irq;
		
		setup_cp0_hpt(&info);
	} else if (IOASIC) {
		setup_hpt_ioasic();
	}
}

and with appropriate rating it should do what you want.

Note that 'dec_calibrate_timer' will be called on each cpu the system
has. So it should be possible to calibrate each processor's clock
individually without too much pain.

I have still few questions:

a) mips_hpt_frequency is still used in a few places. I'm not sure it's
a good thing to keep specially since it's broken in it's current form.
For example it doesn't deal with SMP, if a new clock event is loaded
later we'll need to change its value accordingly. Do you think we can
kill it safely ?

b) Are there some weird MIPS CPUs out there which don't read/ack cp0
hpt in the normal way ?

c) the clocksource rating currently depends on the hpt frequency. It's
more important for this kind of device to have the best frequency
stability whereas high frequency is more valuable for a clock event
device. Should we remove this depedency for the clock source rating.

I attached the patch since I can't cut'n past it into GMAIL interface
without space damages (sigh).

Thanks
-- 
               Franck

------=_Part_62815_6606188.1182087413124
Content-Type: text/x-patch; 
	name=0006-Implement-clockevents-for-R4000-style-cp0-timer.patch; 
	charset=ANSI_X3.4-1968
Content-Transfer-Encoding: base64
X-Attachment-Id: f_f31k56rz
Content-Disposition: attachment; filename="0006-Implement-clockevents-for-R4000-style-cp0-timer.patch"

RnJvbSA3NDlhMDBkMjFlZjNlNGRlNDYyNmI0OWNjYzI4NTM3Mjg5N2JjZDkwIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBGcmFuY2sgQnVpLUh1dSA8ZmJ1aWh1dUBnbWFpbC5jb20+CkRh
dGU6IFRodSwgMTQgSnVuIDIwMDcgMTA6MTg6MDcgKzAyMDAKU3ViamVjdDogW1BBVENIIDYvNl0g
SW1wbGVtZW50IGNsb2NrZXZlbnRzIGZvciBSNDAwMC1zdHlsZSBjcDAgdGltZXIKClNpZ25lZC1v
ZmYtYnk6IEZyYW5jayBCdWktSHV1IDxmYnVpaHV1QGdtYWlsLmNvbT4KLS0tCiBhcmNoL21pcHMv
S2NvbmZpZyAgICAgICAgICB8ICAgIDkgKwogYXJjaC9taXBzL2tlcm5lbC9NYWtlZmlsZSAgfCAg
ICAyICsKIGFyY2gvbWlwcy9rZXJuZWwvaHB0LWNwMC5jIHwgIDI0NyArKysrKysrKysrKysrKysr
KysrKysrKysrKwogYXJjaC9taXBzL2tlcm5lbC9wcm9jZXNzLmMgfCAgICAzICsKIGFyY2gvbWlw
cy9rZXJuZWwvc21wLmMgICAgIHwgICAgMiArCiBhcmNoL21pcHMva2VybmVsL3RpbWUuYyAgICB8
ICA0MTcgKysrKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIGluY2x1
ZGUvYXNtLW1pcHMvaHB0LmggICAgIHwgICAzMCArKysKIGluY2x1ZGUvYXNtLW1pcHMvdGltZS5o
ICAgIHwgICA0NiArKy0tLS0KIDggZmlsZXMgY2hhbmdlZCwgMzM3IGluc2VydGlvbnMoKyksIDQx
OSBkZWxldGlvbnMoLSkKIGNyZWF0ZSBtb2RlIDEwMDY0NCBhcmNoL21pcHMva2VybmVsL2hwdC1j
cDAuYwogY3JlYXRlIG1vZGUgMTAwNjQ0IGluY2x1ZGUvYXNtLW1pcHMvaHB0LmgKCmRpZmYgLS1n
aXQgYS9hcmNoL21pcHMvS2NvbmZpZyBiL2FyY2gvbWlwcy9LY29uZmlnCmluZGV4IDE5NmQ5MGEu
LjliY2ZlMzggMTAwNjQ0Ci0tLSBhL2FyY2gvbWlwcy9LY29uZmlnCisrKyBiL2FyY2gvbWlwcy9L
Y29uZmlnCkBAIC03MDQsNiArNzA0LDE0IEBAIGNvbmZpZyBHRU5FUklDX1RJTUUKIAlib29sCiAJ
ZGVmYXVsdCB5CiAKK2NvbmZpZyBHRU5FUklDX0NMT0NLRVZFTlRTCisJYm9vbAorCWRlZmF1bHQg
eQorCitjb25maWcgQ1AwX0hQVF9USU1FUgorCWJvb2wKKwlkZWZhdWx0IHkKKwogY29uZmlnIEdF
TkVSSUNfQ01PU19VUERBVEUKIAlib29sCiAJZGVmYXVsdCB5CkBAIC0xNzIyLDYgKzE3MzAsNyBA
QCBjb25maWcgSFoKIAlkZWZhdWx0IDEwMDAgaWYgSFpfMTAwMAogCWRlZmF1bHQgMTAyNCBpZiBI
Wl8xMDI0CiAKK3NvdXJjZSAia2VybmVsL3RpbWUvS2NvbmZpZyIKIHNvdXJjZSAia2VybmVsL0tj
b25maWcucHJlZW1wdCIKIAogY29uZmlnIE1JUFNfSU5TQU5FX0xBUkdFCmRpZmYgLS1naXQgYS9h
cmNoL21pcHMva2VybmVsL01ha2VmaWxlIGIvYXJjaC9taXBzL2tlcm5lbC9NYWtlZmlsZQppbmRl
eCA0OTI0NjI2Li5mZmQ0MzUyIDEwMDY0NAotLS0gYS9hcmNoL21pcHMva2VybmVsL01ha2VmaWxl
CisrKyBiL2FyY2gvbWlwcy9rZXJuZWwvTWFrZWZpbGUKQEAgLTExLDYgKzExLDggQEAgb2JqLXkJ
CSs9IGNwdS1wcm9iZS5vIGJyYW5jaC5vIGVudHJ5Lm8gZ2VuZXgubyBpcnEubyBwcm9jZXNzLm8g
XAogYmluZm10X2lyaXgtb2Jqcwk6PSBpcml4ZWxmLm8gaXJpeGludi5vIGlyaXhpb2N0bC5vIGly
aXhzaWcubwlcCiAJCQkgICBpcml4NXN5cy5vIHN5c2lyaXgubwogCitvYmotJChDT05GSUdfQ1Aw
X0hQVF9USU1FUikJKz0gaHB0LWNwMC5vCisKIG9iai0kKENPTkZJR19TVEFDS1RSQUNFKQkrPSBz
dGFja3RyYWNlLm8KIG9iai0kKENPTkZJR19NT0RVTEVTKQkJKz0gbWlwc19rc3ltcy5vIG1vZHVs
ZS5vCiAKZGlmZiAtLWdpdCBhL2FyY2gvbWlwcy9rZXJuZWwvaHB0LWNwMC5jIGIvYXJjaC9taXBz
L2tlcm5lbC9ocHQtY3AwLmMKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uNDRi
YjJhZAotLS0gL2Rldi9udWxsCisrKyBiL2FyY2gvbWlwcy9rZXJuZWwvaHB0LWNwMC5jCkBAIC0w
LDAgKzEsMjQ3IEBACisvKgorICogVGhpcyBpcyBhIGRyaXZlciBmb3IgQ1AwIGhwdC4KKyAqLwor
I2luY2x1ZGUgPGxpbnV4L2tlcm5lbF9zdGF0Lmg+CisjaW5jbHVkZSA8bGludXgvc3BpbmxvY2su
aD4KKyNpbmNsdWRlIDxsaW51eC9jbG9ja2NoaXBzLmg+CisjaW5jbHVkZSA8bGludXgvY2xvY2tz
b3VyY2UuaD4KKworCisjaW5jbHVkZSA8YXNtL3RpbWUuaD4KKyNpbmNsdWRlIDxhc20vaHB0Lmg+
CisKKworI2RlZmluZSBNSVBTX0hQVF9OQU1FCSJjcDAtaHB0IgorCisKK3N0YXRpYyB1bnNpZ25l
ZCAoKmNwMF9ocHRfZ2V0X2ZyZXEpKGludCBjcHUpIF9faW5pdGRhdGE7CitzdGF0aWMgaXJxcmV0
dXJuX3QgKCpwZXJmX2hhbmRsZXIpKGludCBpcnEsIHZvaWQgKmRldl9pZCkgX19yZWFkX21vc3Rs
eTsKKworCisvKgorICogaHB0IGNhbiBiZSBkaXNhYmxlZCBieSBib290IGNvbW1hbmQgbGluZQor
ICovCitzdGF0aWMgaW50IGNwMF9ocHRfZGlzYWJsZWQgX19pbml0ZGF0YTsKKworc3RhdGljIGlu
dCBfX2luaXQgbm9fY3AwX2hwdF9zZXR1cChjaGFyICpzdHIpCit7CisJY3AwX2hwdF9kaXNhYmxl
ZCA9IDE7CisJcmV0dXJuIDA7Cit9CitlYXJseV9wYXJhbSgibm8tY3AwLWhwdCIsIG5vX2NwMF9o
cHRfc2V0dXApOworCisvKgorICogY3AwIGhwdCBvcGVyYXRpb25zLiBDYW4gYmUgb3ZlcnJpZGVu
IGJ5IHBsYXRmb3JtIGNvZGUKKyAqLworc3RhdGljIHZvaWQgY3AwX2hwdF9hY2sodm9pZCkKK3sK
Kwl3cml0ZV9jMF9jb21wYXJlKHJlYWRfYzBfY29tcGFyZSgpKTsKK30KKworc3RhdGljIGN5Y2xl
X3QgY3AwX2hwdF9yZWFkKHZvaWQpCit7CisgICAgICAgIHJldHVybiByZWFkX2MwX2NvdW50KCk7
Cit9CisKKy8qCisgKiBDbG9ja3NvdXJjZSBmdW5jdGlvbnMKKyAqLworc3RydWN0IGNsb2Nrc291
cmNlIGhwdF9jbG9ja3NvdXJjZSA9IHsKKwkubmFtZQkJPSBNSVBTX0hQVF9OQU1FLAorCS5tYXNr
CQk9IENMT0NLU09VUkNFX01BU0soMzIpLAorCS5mbGFncwkJPSBDTE9DS19TT1VSQ0VfSVNfQ09O
VElOVU9VUywKKwkucmVhZAkJPSBjcDBfaHB0X3JlYWQsCit9OworCisvKiBGSVhNRTogZm9yIGEg
Y2xvY2tzb3VyY2UsIHJhdGluZyBzaG91bGQgbm90IGRlcGVuZCBvbiBmcmVxdWVuY3ksCisgKiBz
dGFiaWxpdHkgaXMgc29tZXRoaW5nIG1vcmUgdmFsdWFibGUuLi4KKyAqLworc3RhdGljIGludCBj
cDBfaHB0X3JhdGluZyh1bnNpZ25lZCBmcmVxKQoreworCXJldHVybiAyMDAgKyBmcmVxIC8gMTAw
MDAwMDA7Cit9CisKK3N0YXRpYyB2b2lkIF9faW5pdCBzZXR1cF9jcDBfaHB0X2Nsb2Nrc291cmNl
KHZvaWQpCit7CisJdW5zaWduZWQgZnJlcSA9IGNwMF9ocHRfZ2V0X2ZyZXEoc21wX3Byb2Nlc3Nv
cl9pZCgpKTsKKwl1bnNpZ25lZCBzaGlmdCA9IDA7CisJdTY0IG11bHQ7CisKKwlmb3IgKHNoaWZ0
ID0gMzI7IHNoaWZ0ID4gMDsgc2hpZnQtLSkgeworCQltdWx0ID0gKHU2NClOU0VDX1BFUl9TRUMg
PDwgc2hpZnQ7CisJCWRvX2RpdihtdWx0LCBmcmVxKTsKKwkJaWYgKChtdWx0ID4+IDMyKSA9PSAw
KQorCQkJYnJlYWs7CisJfQorCisJaHB0X2Nsb2Nrc291cmNlLnNoaWZ0ID0gc2hpZnQ7CisJaHB0
X2Nsb2Nrc291cmNlLm11bHQgPSBtdWx0OworCWhwdF9jbG9ja3NvdXJjZS5yYXRpbmcgPSBjcDBf
aHB0X3JhdGluZyhmcmVxKTsKKworCWNsb2Nrc291cmNlX3JlZ2lzdGVyKCZocHRfY2xvY2tzb3Vy
Y2UpOworfQorCisvKgorICogSGlnaCBwcmVjaXNpb24gdGltZXIgZnVuY3Rpb25zCisgKi8KKwor
c3RhdGljIGludCBjcDBfaHB0X3NldF9uZXh0X2V2ZW50KHVuc2lnbmVkIGxvbmcgZGVsdGEsCisJ
CQkJICAgc3RydWN0IGNsb2NrX2V2ZW50X2RldmljZSAqZXZ0KQoreworCXVuc2lnbmVkIGludCBj
bnQ7CisKKwlCVUdfT04oZXZ0LT5tb2RlICE9IENMT0NLX0VWVF9NT0RFX09ORVNIT1QpOworCisJ
LyogaW50ZXJydXB0IGFjayBpcyBkb25lIGJ5IHNldHRpbmcgdXAgdGhlIG5leHQgZXZlbnQgKi8K
KwljbnQgPSByZWFkX2MwX2NvdW50KCk7CisJY250ICs9IGRlbHRhOworCXdyaXRlX2MwX2NvbXBh
cmUoY250KTsKKworCXJldHVybiAoKGxvbmcpKHJlYWRfYzBfY291bnQoKSAtIGNudCkgPiAwTCkg
PyAtRVRJTUUgOiAwOworfQorCitzdGF0aWMgdm9pZCBjcDBfaHB0X3NldF9tb2RlKGVudW0gY2xv
Y2tfZXZlbnRfbW9kZSBtb2RlLAorCQkJICAgICBzdHJ1Y3QgY2xvY2tfZXZlbnRfZGV2aWNlICpl
dnQpCit7CisJc3dpdGNoIChtb2RlKSB7CisJY2FzZSBDTE9DS19FVlRfTU9ERV9TSFVURE9XTjoK
KwkJLyoKKwkJICogRm9yIG5vdywgd2UgY2FuJ3QgZGlzYWJsZSBjcDAgaHB0IGludGVycnVwdHMu
IFNvIHdlCisJCSAqIGxlYXZlIHRoZW0gZW5hYmxlZCwgYW5kIGlnbm9yZSB0aGVtIGluIHRoaXMg
bW9kZS4KKwkJICogVGhlcmVmb3JlIHdlIHdpbGwgZ2V0IG9uZSB1c2VsZXNzIGJ1dCBhbHNvIGhh
cm1sZXNzCisJCSAqIGludGVycnVwdCBldmVyeSAyXjMyIGN5Y2xlcy4uLgorCQkgKi8KKwkJY3Aw
X2hwdF9hY2soKTsKKwkJYnJlYWs7CisJY2FzZSBDTE9DS19FVlRfTU9ERV9PTkVTSE9UOgorCQkv
KiBub3RoaW5nIHRvIGRvICovCisJCWJyZWFrOworCWNhc2UgQ0xPQ0tfRVZUX01PREVfUEVSSU9E
SUM6CisJCUJVRygpOworCX07Cit9CisKK3N0YXRpYyBzdHJ1Y3QgY2xvY2tfZXZlbnRfZGV2aWNl
IGhwdF9jbG9ja2V2ZW50ID0geworCS5uYW1lCQk9IE1JUFNfSFBUX05BTUUsCisJLm1vZGUJCT0g
Q0xPQ0tfRVZUX01PREVfVU5VU0VELAorCS5mZWF0dXJlcwk9IENMT0NLX0VWVF9GRUFUX09ORVNI
T1QsCisJLnNoaWZ0CQk9IDMyLAorCS5zZXRfbW9kZQk9IGNwMF9ocHRfc2V0X21vZGUsCisJLnNl
dF9uZXh0X2V2ZW50CT0gY3AwX2hwdF9zZXRfbmV4dF9ldmVudCwKKwkuaXJxCQk9IC0xLAorfTsK
Kworc3RhdGljIERFRklORV9QRVJfQ1BVKHN0cnVjdCBjbG9ja19ldmVudF9kZXZpY2UsIGNwMF9o
cHRfY2xvY2tfZXZlbnRzKTsKKwordm9pZCBfX2luaXQgc2V0dXBfY3AwX2hwdF9jbG9ja2V2ZW50
KHZvaWQpCit7CisJc3RydWN0IGNsb2NrX2V2ZW50X2RldmljZSAqY2Q7CisJaW50IGNwdSA9IHNt
cF9wcm9jZXNzb3JfaWQoKTsKKwl1bnNpZ25lZCBmcmVxOworCisJaWYgKGNwMF9ocHRfZGlzYWJs
ZWQpCisJCXJldHVybjsKKworCWNkID0gJl9fZ2V0X2NwdV92YXIoY3AwX2hwdF9jbG9ja19ldmVu
dHMpOworCisJbWVtY3B5KGNkLCAmaHB0X2Nsb2NrZXZlbnQsIHNpemVvZigqY2QpKTsKKwljZC0+
bWF4X2RlbHRhX25zID0gY2xvY2tldmVudF9kZWx0YTJucygtMSwgJmhwdF9jbG9ja2V2ZW50KTsK
KwljZC0+bWluX2RlbHRhX25zID0gY2xvY2tldmVudF9kZWx0YTJucygrMSwgJmhwdF9jbG9ja2V2
ZW50KTsKKworCWZyZXEgPSBjcDBfaHB0X2dldF9mcmVxKGNwdSk7CisKKwljZC0+bXVsdCA9IGRp
dl9zYyhmcmVxLCBOU0VDX1BFUl9TRUMsIGNkLT5zaGlmdCk7CisJY2QtPnJhdGluZyA9IGNwMF9o
cHRfcmF0aW5nKGZyZXEpOworCWNkLT5jcHVtYXNrID0gY3B1bWFza19vZl9jcHUoY3B1KTsKKwor
CWNsb2NrZXZlbnRzX3JlZ2lzdGVyX2RldmljZShjZCk7CisKKwlwcmludGsoIlVzaW5nICV1LiUw
M3UgTUh6IENQMCBoaWdoIHByZWNpc2lvbiB0aW1lciBvbiBDUFUgIyVkLlxuIiwKKwkgICAgICAg
KChmcmVxICsgNTAwKSAvIDEwMDApIC8gMTAwMCwKKwkgICAgICAgKChmcmVxICsgNTAwKSAvIDEw
MDApICUgMTAwMCwKKwkJY3B1KTsKK30KKworc3RhdGljIGlycXJldHVybl90IGNwMF9ocHRfaW50
ZXJydXB0KGludCBpcnEsIHZvaWQgKmRldl9pZCkKK3sKKwljb25zdCBpbnQgcjIgPSBjcHVfaGFz
X21pcHNfcjI7CisJc3RydWN0IGNsb2NrX2V2ZW50X2RldmljZSAqY2Q7CisKKwkvKgorCSAqIFN1
Y2thZ2UgYWxlcnQ6CisJICogQmVmb3JlIFIyIG9mIHRoZSBhcmNoaXRlY3R1cmUgdGhlcmUgd2Fz
IG5vIHdheSB0byBzZWUgaWYgYQorCSAqIHBlcmZvcm1hbmNlIGNvdW50ZXIgaW50ZXJydXB0IHdh
cyBwZW5kaW5nLCBzbyB3ZSBoYXZlIHRvIHJ1bgorCSAqIHRoZSBwZXJmb3JtYW5jZSBjb3VudGVy
IGludGVycnVwdCBoYW5kbGVyIGFueXdheS4KKwkgKi8KKwlpZiAocGVyZl9oYW5kbGVyICYmIHBl
cmZfaGFuZGxlcihpcnEsIGRldl9pZCkgPT0gSVJRX0hBTkRMRUQpCisJCS8qCisJCSAqIFRoZSBw
ZXJmb3JtYW5jZSBjb3VudGVyIG92ZXJmbG93IGludGVycnVwdCBtYXkgYmUKKwkJICogc2hhcmVk
IHdpdGggdGhlIHRpbWVyIGludGVycnVwdC4gSWYgaXQgaXMgKCFyMikKKwkJICogdGhlbiB3ZSBj
YW4ndCByZWxpYWJseSBkZXRlcm1pbmUgaWYgYSBjb3VudGVyCisJCSAqIGludGVycnVwdCBoYXMg
YWxzbyBoYXBwZW5lZC4gU28gZG9uJ3QgY2hlY2sgZm9yIGEKKwkJICogdGltZXIgaW50ZXJydXB0
IGluIHRoaXMgY2FzZS4KKwkJICovCisJCWlmICghcjIpCisJCQlnb3RvIG91dDsKKworCS8qCisJ
ICogVGhlIHNhbWUgYXBwbGllcyB0byBwZXJmb3JtYW5jZSBjb3VudGVyIGludGVycnVwdHMuICBC
dXQgd2l0aCB0aGUKKwkgKiBhYm92ZSB3ZSBub3cga25vdyB0aGF0IHRoZSByZWFzb24gd2UgZ290
IGhlcmUgbXVzdCBiZSBhIHRpbWVyCisJICogaW50ZXJydXB0LiAgQmVpbmcgdGhlIHBhcmFub2lh
Y3Mgd2UgYXJlIHdlIGNoZWNrIGFueXdheS4KKwkgKi8KKwlpZiAoIXIyIHx8IChyZWFkX2MwX2Nh
dXNlKCkgJiAoMSA8PCAzMCkpKSB7CisJCWNkID0gJl9fZ2V0X2NwdV92YXIoY3AwX2hwdF9jbG9j
a19ldmVudHMpOworCisJCWlmIChsaWtlbHkoY2QtPm1vZGUgIT0gQ0xPQ0tfRVZUX01PREVfU0hV
VERPV04pKQorCQkJY2QtPmV2ZW50X2hhbmRsZXIoY2QpOworCQllbHNlCisJCQkvKgorCQkJICog
V2UgYWNrIHRoZSBjb3VudGVyIHNpbmNlIHdlIGRvbid0IHNodXQgaXQKKwkJCSAqIGRvd24uICBU
aGVyZWZvcmUgd2UgY2FuIGdldCBpbnRlcnJ1cHRzCisJCQkgKiB3aGVyZWFzIHRoZSBocHQgY2xv
Y2sgZXZlbnQgZGV2aWNlIGhhcyBiZWVuCisJCQkgKiBkaXNhYmxlZC4KKwkJCSAqLworCQkJY3Aw
X2hwdF9hY2soKTsKKwl9CitvdXQ6CisJcmV0dXJuIElSUV9IQU5ETEVEOworfQorCitzdHJ1Y3Qg
aXJxYWN0aW9uIGhwdF9pcnFhY3Rpb24gPSB7CisJLmhhbmRsZXIJPSBjcDBfaHB0X2ludGVycnVw
dCwKKwkuZmxhZ3MJCT0gSVJRRl9ESVNBQkxFRCB8IElSUUZfUEVSQ1BVLAorCS5uYW1lCQk9IE1J
UFNfSFBUX05BTUUsCit9OworCisKKy8qCisgKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYnkgcGxh
dGZvcm1zIHdoaWNoIHVzZSB0aGUgaHB0IGFzIGNsb2NrCisgKiBzb3VyY2UgYW5kIHRpbWVyLgor
ICovCitpbnQgX19pbml0IHNldHVwX2NwMF9ocHQoc3RydWN0IGNwMF9ocHRfaW5mbyAqaW5mbykK
K3sKKwlpZiAoY3AwX2hwdF9kaXNhYmxlZCkKKwkJZ290byBvdXQ7CisJaWYgKCFjcHVfaGFzX2Nv
dW50ZXIpCisJCWdvdG8gZGlzYWJsZTsKKworCWlmIChpbmZvLT5pcnEgPT0gMCkKKwkJZ290byBk
aXNhYmxlOworCWlmIChpbmZvLT5nZXRfZnJlcSA9PSBOVUxMKQorCQlnb3RvIGRpc2FibGU7CisK
KwljcDBfaHB0X2dldF9mcmVxID0gaW5mby0+Z2V0X2ZyZXE7CisJcGVyZl9oYW5kbGVyID0gaW5m
by0+cGVyZl9oYW5kbGVyOworCisJc2V0dXBfY3AwX2hwdF9jbG9ja3NvdXJjZSgpOworCXNldHVw
X2NwMF9ocHRfY2xvY2tldmVudCgpOworCisJLyogRW5hYmxlIGhwdCBpbnRlcnJ1cHQuICovCisJ
c2V0dXBfaXJxKGluZm8tPmlycSwgJmhwdF9pcnFhY3Rpb24pOworb3V0OgorCXJldHVybiAwOwor
ZGlzYWJsZToKKwlwcmludGsoS0VSTl9XQVJOSU5HICJFcnJvciB3aGVuIHN0YXJ0aW5nIENQMCBo
cHQuLi4gZGlzYWJsZWRcbiIpOworCWNwMF9ocHRfZGlzYWJsZWQgPSAxOworCXJldHVybiAtRUlO
VkFMOworfQpkaWZmIC0tZ2l0IGEvYXJjaC9taXBzL2tlcm5lbC9wcm9jZXNzLmMgYi9hcmNoL21p
cHMva2VybmVsL3Byb2Nlc3MuYwppbmRleCA2YmRmYjVhLi4yM2I4ODU4IDEwMDY0NAotLS0gYS9h
cmNoL21pcHMva2VybmVsL3Byb2Nlc3MuYworKysgYi9hcmNoL21pcHMva2VybmVsL3Byb2Nlc3Mu
YwpAQCAtMjUsNiArMjUsNyBAQAogI2luY2x1ZGUgPGxpbnV4L2luaXQuaD4KICNpbmNsdWRlIDxs
aW51eC9jb21wbGV0aW9uLmg+CiAjaW5jbHVkZSA8bGludXgva2FsbHN5bXMuaD4KKyNpbmNsdWRl
IDxsaW51eC90aWNrLmg+CiAKICNpbmNsdWRlIDxhc20vYm9vdGluZm8uaD4KICNpbmNsdWRlIDxh
c20vY3B1Lmg+CkBAIC01MCw2ICs1MSw3IEBAIEFUVFJJQl9OT1JFVCB2b2lkIGNwdV9pZGxlKHZv
aWQpCiB7CiAJLyogZW5kbGVzcyBpZGxlIGxvb3Agd2l0aCBubyBwcmlvcml0eSBhdCBhbGwgKi8K
IAl3aGlsZSAoMSkgeworCQl0aWNrX25vaHpfc3RvcF9zY2hlZF90aWNrKCk7CiAJCXdoaWxlICgh
bmVlZF9yZXNjaGVkKCkpIHsKICNpZmRlZiBDT05GSUdfU01UQ19JRExFX0hPT0tfREVCVUcKIAkJ
CWV4dGVybiB2b2lkIHNtdGNfaWRsZV9sb29wX2hvb2sodm9pZCk7CkBAIC01OSw2ICs2MSw3IEBA
IEFUVFJJQl9OT1JFVCB2b2lkIGNwdV9pZGxlKHZvaWQpCiAJCQlpZiAoY3B1X3dhaXQpCiAJCQkJ
KCpjcHVfd2FpdCkoKTsKIAkJfQorCQl0aWNrX25vaHpfcmVzdGFydF9zY2hlZF90aWNrKCk7CiAJ
CXByZWVtcHRfZW5hYmxlX25vX3Jlc2NoZWQoKTsKIAkJc2NoZWR1bGUoKTsKIAkJcHJlZW1wdF9k
aXNhYmxlKCk7CmRpZmYgLS1naXQgYS9hcmNoL21pcHMva2VybmVsL3NtcC5jIGIvYXJjaC9taXBz
L2tlcm5lbC9zbXAuYwppbmRleCA2N2VkZmE3Li44NWFkMTMwIDEwMDY0NAotLS0gYS9hcmNoL21p
cHMva2VybmVsL3NtcC5jCisrKyBiL2FyY2gvbWlwcy9rZXJuZWwvc21wLmMKQEAgLTM3LDYgKzM3
LDcgQEAKICNpbmNsdWRlIDxhc20vc3lzdGVtLmg+CiAjaW5jbHVkZSA8YXNtL21tdV9jb250ZXh0
Lmg+CiAjaW5jbHVkZSA8YXNtL3NtcC5oPgorI2luY2x1ZGUgPGFzbS9ocHQuaD4KIAogI2lmZGVm
IENPTkZJR19NSVBTX01UX1NNVEMKICNpbmNsdWRlIDxhc20vbWlwc210cmVncy5oPgpAQCAtNzks
NiArODAsNyBAQCBhc21saW5rYWdlIF9fY3B1aW5pdCB2b2lkIHN0YXJ0X3NlY29uZGFyeSh2b2lk
KQogCWNwdV9wcm9iZSgpOwogCWNwdV9yZXBvcnQoKTsKIAlwZXJfY3B1X3RyYXBfaW5pdCgpOwor
CXNldHVwX2NwMF9ocHRfY2xvY2tldmVudCgvKiBjYWxpYnJhdGVfdGltZXIoKSAqLyk7CiAJcHJv
bV9pbml0X3NlY29uZGFyeSgpOwogCiAJLyoKZGlmZiAtLWdpdCBhL2FyY2gvbWlwcy9rZXJuZWwv
dGltZS5jIGIvYXJjaC9taXBzL2tlcm5lbC90aW1lLmMKaW5kZXggNzJkZjBiZi4uYjdmZTNhZiAx
MDA2NDQKLS0tIGEvYXJjaC9taXBzL2tlcm5lbC90aW1lLmMKKysrIGIvYXJjaC9taXBzL2tlcm5l
bC90aW1lLmMKQEAgLTEsNDggKzEsMTYgQEAKLS8qCi0gKiBDb3B5cmlnaHQgMjAwMSBNb250YVZp
c3RhIFNvZnR3YXJlIEluYy4KLSAqIEF1dGhvcjogSnVuIFN1biwganN1bkBtdmlzdGEuY29tIG9y
IGpzdW5AanVuc3VuLm5ldAotICogQ29weXJpZ2h0IChjKSAyMDAzLCAyMDA0ICBNYWNpZWogVy4g
Um96eWNraQotICoKLSAqIENvbW1vbiB0aW1lIHNlcnZpY2Ugcm91dGluZXMgZm9yIE1JUFMgbWFj
aGluZXMuIFNlZQotICogRG9jdW1lbnRhdGlvbi9taXBzL3RpbWUuUkVBRE1FLgotICoKLSAqIFRo
aXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSAgaXQgYW5k
L29yIG1vZGlmeSBpdAotICogdW5kZXIgIHRoZSB0ZXJtcyBvZiAgdGhlIEdOVSBHZW5lcmFsICBQ
dWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlCi0gKiBGcmVlIFNvZnR3YXJlIEZvdW5k
YXRpb247ICBlaXRoZXIgdmVyc2lvbiAyIG9mIHRoZSAgTGljZW5zZSwgb3IgKGF0IHlvdXIKLSAq
IG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCi0gKi8KLSNpbmNsdWRlIDxsaW51eC90eXBlcy5o
PgotI2luY2x1ZGUgPGxpbnV4L2tlcm5lbC5oPgotI2luY2x1ZGUgPGxpbnV4L2luaXQuaD4KLSNp
bmNsdWRlIDxsaW51eC9zY2hlZC5oPgotI2luY2x1ZGUgPGxpbnV4L3BhcmFtLmg+Ci0jaW5jbHVk
ZSA8bGludXgvdGltZS5oPgotI2luY2x1ZGUgPGxpbnV4L3RpbWV4Lmg+Ci0jaW5jbHVkZSA8bGlu
dXgvc21wLmg+CiAjaW5jbHVkZSA8bGludXgva2VybmVsX3N0YXQuaD4KICNpbmNsdWRlIDxsaW51
eC9zcGlubG9jay5oPgotI2luY2x1ZGUgPGxpbnV4L2ludGVycnVwdC5oPgotI2luY2x1ZGUgPGxp
bnV4L21vZHVsZS5oPgorI2luY2x1ZGUgPGxpbnV4L2Nsb2Nrc291cmNlLmg+CS8qIGN5Y2xlX3Qg
Ki8KIAotI2luY2x1ZGUgPGFzbS9ib290aW5mby5oPgotI2luY2x1ZGUgPGFzbS9jYWNoZS5oPgot
I2luY2x1ZGUgPGFzbS9jb21waWxlci5oPgotI2luY2x1ZGUgPGFzbS9jcHUuaD4KLSNpbmNsdWRl
IDxhc20vY3B1LWZlYXR1cmVzLmg+Ci0jaW5jbHVkZSA8YXNtL2RpdjY0Lmg+Ci0jaW5jbHVkZSA8
YXNtL3NlY3Rpb25zLmg+CiAjaW5jbHVkZSA8YXNtL3RpbWUuaD4KIAogLyoKLSAqIFRoZSBpbnRl
Z2VyIHBhcnQgb2YgdGhlIG51bWJlciBvZiB1c2VjcyBwZXIgamlmZnkgaXMgdGFrZW4gZnJvbSB0
aWNrLAotICogYnV0IHRoZSBmcmFjdGlvbmFsIHBhcnQgaXMgbm90IHJlY29yZGVkLCBzbyB3ZSBj
YWxjdWxhdGUgaXQgdXNpbmcgdGhlCi0gKiBpbml0aWFsIHZhbHVlIG9mIEhaLiAgVGhpcyBhaWRz
IHN5c3RlbXMgd2hlcmUgdGljayBpc24ndCByZWFsbHkgYW4KLSAqIGludGVnZXIgKGUuZy4gZm9y
IEhaID0gMTI4KS4KKyAqIFRoaXMgaXMgdGhlIGZyZXEgb2YgdGhlIHRpY2sgdGltZXIgb2YgdGhl
IHBsYXRmb3JtLiAgSXQncyBub3QKKyAqIGFsd2F5cyBhIF9oaWdoXyBwcmVjaXNpb24gdGltZXIg
YXMgaXRzIG5hbWUgc3VnZ2VzdHMuCisgKgorICogRklYTUU6IElzIGl0IHJlYWxseSBuZWVkZWQg
PyBzaG91bGRuJ3QgaXQgYmUgYSBwZXIgY3B1IHZhbHVlID8KICAqLwotI2RlZmluZSBVU0VDU19Q
RVJfSklGRlkJCVRJQ0tfU0laRQotI2RlZmluZSBVU0VDU19QRVJfSklGRllfRlJBQwkoKHVuc2ln
bmVkIGxvbmcpKHUzMikoKDEwMDAwMDBVTEwgPDwgMzIpIC8gSFopKQotCi0jZGVmaW5lIFRJQ0tf
U0laRQkodGlja19uc2VjIC8gMTAwMCkKK3Vuc2lnbmVkIGludCBtaXBzX2hwdF9mcmVxdWVuY3kg
X19yZWFkX21vc3RseTsKIAogLyoKICAqIFJUQy4gQnkgZGVmYXVsdCB3ZSBwcm92aWRlIHRoZSBu
dWxsIFJUQyBob29rcwpAQCAtNzksMjY0ICs0NywzOSBAQCBpbnQgdXBkYXRlX3BlcnNpc3RlbnRf
Y2xvY2soc3RydWN0IHRpbWVzcGVjIG5vdykKIAlyZXR1cm4gbWlwc19ydGNfc2V0X21tc3Mobm93
LnR2X3NlYyk7CiB9CiAKLS8qIGhvdyBtYW55IGNvdW50ZXIgY3ljbGVzIGluIGEgamlmZnkgKi8K
LXN0YXRpYyB1bnNpZ25lZCBsb25nIGN5Y2xlc19wZXJfamlmZnkgX19yZWFkX21vc3RseTsKLQot
LyogZXhwaXJlbG8gaXMgdGhlIGNvdW50IHZhbHVlIGZvciBuZXh0IENQVSB0aW1lciBpbnRlcnJ1
cHQgKi8KLXN0YXRpYyB1bnNpZ25lZCBpbnQgZXhwaXJlbG87Ci0KLQotLyoKLSAqIE51bGwgdGlt
ZXIgYWNrIGZvciBzeXN0ZW1zIG5vdCBuZWVkaW5nIG9uZSAoZS5nLiBpODI1NCkuCi0gKi8KLXN0
YXRpYyB2b2lkIG51bGxfdGltZXJfYWNrKHZvaWQpIHsgLyogbm90aGluZyAqLyB9Ci0KLS8qCi0g
KiBOdWxsIGhpZ2ggcHJlY2lzaW9uIHRpbWVyIGZ1bmN0aW9ucyBmb3Igc3lzdGVtcyBsYWNraW5n
IG9uZS4KLSAqLwotc3RhdGljIGN5Y2xlX3QgbnVsbF9ocHRfcmVhZCh2b2lkKQotewotCXJldHVy
biAwOwotfQotCi0vKgotICogVGltZXIgYWNrIGZvciBhbiBSNGstY29tcGF0aWJsZSB0aW1lciBv
ZiBhIGtub3duIGZyZXF1ZW5jeS4KLSAqLwotc3RhdGljIHZvaWQgYzBfdGltZXJfYWNrKHZvaWQp
Ci17Ci0JdW5zaWduZWQgaW50IGNvdW50OwotCi0JLyogQWNrIHRoaXMgdGltZXIgaW50ZXJydXB0
IGFuZCBzZXQgdGhlIG5leHQgb25lLiAgKi8KLQlleHBpcmVsbyArPSBjeWNsZXNfcGVyX2ppZmZ5
OwotCXdyaXRlX2MwX2NvbXBhcmUoZXhwaXJlbG8pOwotCi0JLyogQ2hlY2sgdG8gc2VlIGlmIHdl
IGhhdmUgbWlzc2VkIGFueSB0aW1lciBpbnRlcnJ1cHRzLiAgKi8KLQl3aGlsZSAoKChjb3VudCA9
IHJlYWRfYzBfY291bnQoKSkgLSBleHBpcmVsbykgPCAweDdmZmZmZmZmKSB7Ci0JCS8qIG1pc3Nl
ZF90aW1lcl9jb3VudCsrOyAqLwotCQlleHBpcmVsbyA9IGNvdW50ICsgY3ljbGVzX3Blcl9qaWZm
eTsKLQkJd3JpdGVfYzBfY29tcGFyZShleHBpcmVsbyk7Ci0JfQotfQotCi0vKgotICogSGlnaCBw
cmVjaXNpb24gdGltZXIgZnVuY3Rpb25zIGZvciBhIFI0ay1jb21wYXRpYmxlIHRpbWVyLgotICov
Ci1zdGF0aWMgY3ljbGVfdCBjMF9ocHRfcmVhZCh2b2lkKQotewotCXJldHVybiByZWFkX2MwX2Nv
dW50KCk7Ci19Ci0KLS8qIEZvciB1c2UgYm90aCBhcyBhIGhpZ2ggcHJlY2lzaW9uIHRpbWVyIGFu
ZCBhbiBpbnRlcnJ1cHQgc291cmNlLiAgKi8KLXN0YXRpYyB2b2lkIF9faW5pdCBjMF9ocHRfdGlt
ZXJfaW5pdCh2b2lkKQotewotCWV4cGlyZWxvID0gcmVhZF9jMF9jb3VudCgpICsgY3ljbGVzX3Bl
cl9qaWZmeTsKLQl3cml0ZV9jMF9jb21wYXJlKGV4cGlyZWxvKTsKLX0KLQotaW50ICgqbWlwc190
aW1lcl9zdGF0ZSkodm9pZCk7Ci12b2lkICgqbWlwc190aW1lcl9hY2spKHZvaWQpOwotCi0vKgot
ICogbG9jYWxfdGltZXJfaW50ZXJydXB0KCkgZG9lcyBwcm9maWxpbmcgYW5kIHByb2Nlc3MgYWNj
b3VudGluZwotICogb24gYSBwZXItQ1BVIGJhc2lzLgotICoKLSAqIEluIFVQIG1vZGUsIGl0IGlz
IGludm9rZWQgZnJvbSB0aGUgKGdsb2JhbCkgdGltZXJfaW50ZXJydXB0LgotICoKLSAqIEluIFNN
UCBtb2RlLCBpdCBtaWdodCBpbnZva2VkIGJ5IHBlci1DUFUgdGltZXIgaW50ZXJydXB0LCBvcgot
ICogYSBicm9hZGNhc3RlZCBpbnRlci1wcm9jZXNzb3IgaW50ZXJydXB0IHdoaWNoIGl0c2VsZiBp
cyB0cmlnZ2VyZWQKLSAqIGJ5IHRoZSBnbG9iYWwgdGltZXIgaW50ZXJydXB0LgotICovCi12b2lk
IGxvY2FsX3RpbWVyX2ludGVycnVwdChpbnQgaXJxKQotewotCXByb2ZpbGVfdGljayhDUFVfUFJP
RklMSU5HKTsKLQl1cGRhdGVfcHJvY2Vzc190aW1lcyh1c2VyX21vZGUoZ2V0X2lycV9yZWdzKCkp
KTsKLX0KLQogLyoKLSAqIEhpZ2gtbGV2ZWwgdGltZXIgaW50ZXJydXB0IHNlcnZpY2Ugcm91dGlu
ZXMuICBUaGlzIGZ1bmN0aW9uCi0gKiBpcyBzZXQgYXMgaXJxYWN0aW9uLT5oYW5kbGVyIGFuZCBp
cyBpbnZva2VkIHRocm91Z2ggZG9fSVJRLgorICogQmFzaWNhbGx5IGl0IGNhbGxzIHRoZSBwbGF0
Zm9ybSBob29rcyB0byBzZXR1cDoKKyAqCWEpIFJUQworICoJYikgYSB0aW1lcgogICovCi1pcnFy
ZXR1cm5fdCB0aW1lcl9pbnRlcnJ1cHQoaW50IGlycSwgdm9pZCAqZGV2X2lkKQotewotCXdyaXRl
X3NlcWxvY2soJnh0aW1lX2xvY2spOwotCi0JbWlwc190aW1lcl9hY2soKTsKLQotCS8qCi0JICog
Y2FsbCB0aGUgZ2VuZXJpYyB0aW1lciBpbnRlcnJ1cHQgaGFuZGxpbmcKLQkgKi8KLQlkb190aW1l
cigxKTsKLQotCXdyaXRlX3NlcXVubG9jaygmeHRpbWVfbG9jayk7Ci0KLQkvKgotCSAqIEluIFVQ
IG1vZGUsIHdlIGNhbGwgbG9jYWxfdGltZXJfaW50ZXJydXB0KCkgdG8gZG8gcHJvZmlsaW5nCi0J
ICogYW5kIHByb2Nlc3MgYWNjb3V0aW5nLgotCSAqCi0JICogSW4gU01QIG1vZGUsIGxvY2FsX3Rp
bWVyX2ludGVycnVwdCgpIGlzIGludm9rZWQgYnkgYXBwcm9wcmlhdGUKLQkgKiBsb3ctbGV2ZWwg
bG9jYWwgdGltZXIgaW50ZXJydXB0IGhhbmRsZXIuCi0JICovCi0JbG9jYWxfdGltZXJfaW50ZXJy
dXB0KGlycSk7Ci0KLQlyZXR1cm4gSVJRX0hBTkRMRUQ7Ci19Ci0KLWludCBudWxsX3BlcmZfaXJx
KHZvaWQpCi17Ci0JcmV0dXJuIDA7Ci19Ci0KLUVYUE9SVF9TWU1CT0wobnVsbF9wZXJmX2lycSk7
Ci0KLWludCAoKnBlcmZfaXJxKSh2b2lkKSA9IG51bGxfcGVyZl9pcnE7Ci0KLUVYUE9SVF9TWU1C
T0wocGVyZl9pcnEpOwotCi0vKgotICogUGVyZm9ybWFuY2UgY291bnRlciBJUlEgb3IgLTEgaWYg
c2hhcmVkIHdpdGggdGltZXIKLSAqLwotaW50IG1pcHN4eF9wZXJmY291bnRfaXJxOwotRVhQT1JU
X1NZTUJPTChtaXBzeHhfcGVyZmNvdW50X2lycSk7Ci0KLS8qCi0gKiBQb3NzaWJseSBoYW5kbGUg
YSBwZXJmb3JtYW5jZSBjb3VudGVyIGludGVycnVwdC4KLSAqIFJldHVybiB0cnVlIGlmIHRoZSB0
aW1lciBpbnRlcnJ1cHQgc2hvdWxkIG5vdCBiZSBjaGVja2VkCi0gKi8KLXN0YXRpYyBpbmxpbmUg
aW50IGhhbmRsZV9wZXJmX2lycShpbnQgcjIpCi17Ci0JLyoKLQkgKiBUaGUgcGVyZm9ybWFuY2Ug
Y291bnRlciBvdmVyZmxvdyBpbnRlcnJ1cHQgbWF5IGJlIHNoYXJlZCB3aXRoIHRoZQotCSAqIHRp
bWVyIGludGVycnVwdCAobWlwc3h4X3BlcmZjb3VudF9pcnEgPCAwKS4gSWYgaXQgaXMgYW5kIGEK
LQkgKiBwZXJmb3JtYW5jZSBjb3VudGVyIGhhcyBvdmVyZmxvd2VkIChwZXJmX2lycSgpID09IElS
UV9IQU5ETEVEKQotCSAqIGFuZCB3ZSBjYW4ndCByZWxpYWJseSBkZXRlcm1pbmUgaWYgYSBjb3Vu
dGVyIGludGVycnVwdCBoYXMgYWxzbwotCSAqIGhhcHBlbmVkICghcjIpIHRoZW4gZG9uJ3QgY2hl
Y2sgZm9yIGEgdGltZXIgaW50ZXJydXB0LgotCSAqLwotCXJldHVybiAobWlwc3h4X3BlcmZjb3Vu
dF9pcnEgPCAwKSAmJgotCQlwZXJmX2lycSgpID09IElSUV9IQU5ETEVEICYmCi0JCSFyMjsKLX0K
LQotZXh0ZXJuIHZvaWQgc210Y190aW1lcl9icm9hZGNhc3QoaW50KTsKLQotdm9pZCBsbF90aW1l
cl9pbnRlcnJ1cHQoaW50IGlycSkKK3ZvaWQgX19pbml0IHRpbWVfaW5pdCh2b2lkKQogewotCWlu
dCBjcHUgPSBzbXBfcHJvY2Vzc29yX2lkKCk7Ci0JaW50IHIyID0gY3B1X2hhc19taXBzX3IyOwot
Ci0JaXJxX2VudGVyKCk7Ci0Ja3N0YXRfdGhpc19jcHUuaXJxc1tpcnFdKys7Ci0KLSNpZmRlZiBD
T05GSUdfTUlQU19NVF9TTVRDCiAJLyoKLQkgKiAgSW4gYW4gU01UQyBzeXN0ZW0sIG9uZSBDb3Vu
dC9Db21wYXJlIHNldCBleGlzdHMgcGVyIFZQRS4KLQkgKiAgV2hpY2ggVEMgd2l0aGluIGEgVlBF
IGdldHMgdGhlIGludGVycnVwdCBpcyBlc3NlbnRpYWxseQotCSAqICByYW5kb20gLSB3ZSBvbmx5
IGtub3cgdGhhdCBpdCBzaG91bGRuJ3QgYmUgb25lIHdpdGgKLQkgKiAgSVhNVCBzZXQuIFdoaWNo
ZXZlciBUQyBnZXRzIHRoZSBpbnRlcnJ1cHQgbmVlZHMgdG8KLQkgKiAgc2VuZCBzcGVjaWFsIGlu
dGVycHJvY2Vzc29yIGludGVycnVwdHMgdG8gdGhlIG90aGVyCi0JICogIFRDcyB0byBtYWtlIHN1
cmUgdGhhdCB0aGV5IHNjaGVkdWxlLCBldGMuCi0JICoKLQkgKiAgVGhhdCBjb2RlIGlzIHNwZWNp
ZmljIHRvIHRoZSBTTVRDIGtlcm5lbCwgbm90IHRvCi0JICogIHRoZSBhIHBhcnRpY3VsYXIgcGxh
dGZvcm0sIHNvIGl0J3MgaW52b2tlZCBmcm9tCi0JICogIHRoZSBnZW5lcmFsIE1JUFMgdGltZXJf
aW50ZXJydXB0IHJvdXRpbmUuCisJICogTWFuZGF0b3J5IHBsYXRmb3JtIGhvb2suIEl0IGJhc2lj
YWxseSBzZXR1cCB0aGUgUlRDLgorCSAqIEZJWE1FOiBzaG91bGRuJ3Qgd2UgY2FsbCB0aGVzZSBi
ZWZvcmUgY2FsbGluZworCSAqIHRpbWVrZWVwaW5nX2luaXQoKSA/CiAJICovCisJcGxhdF90aW1l
X2luaXQoKTsKIAogCS8qCi0JICogV2UgY291bGQgYmUgaGVyZSBkdWUgdG8gdGltZXIgaW50ZXJy
dXB0LAotCSAqIHBlcmYgY291bnRlciBvdmVyZmxvdywgb3IgYm90aC4KKwkgKiBQbGF0Zm9ybSBj
YW4gc2V0dXAgYSBuZXcgdGltZXIsIGhwdCB0aW1lci4uLgogCSAqLwotCSh2b2lkKSBoYW5kbGVf
cGVyZl9pcnEoMSk7Ci0KLQlpZiAocmVhZF9jMF9jYXVzZSgpICYgKDEgPDwgMzApKSB7Ci0JCS8q
Ci0JCSAqIFRoZXJlIGFyZSB0aGluZ3Mgd2Ugb25seSB3YW50IHRvIGRvIG9uY2UgcGVyIHRpY2sK
LQkJICogaW4gYW4gIk1QIiBzeXN0ZW0uICAgT25lIFRDIG9mIGVhY2ggVlBFIHdpbGwgdGFrZQot
CQkgKiB0aGUgYWN0dWFsIHRpbWVyIGludGVycnVwdC4gIFRoZSBvdGhlcnMgd2lsbCBnZXQKLQkJ
ICogdGltZXIgYnJvYWRjYXN0IElQSXMuIFdlIHVzZSB3aG9ldmVyIGl0IGlzIHRoYXQgdGFrZXMK
LQkJICogdGhlIHRpY2sgb24gVlBFIDAgdG8gcnVuIHRoZSBmdWxsIHRpbWVyX2ludGVycnVwdCgp
LgotCQkgKi8KLQkJaWYgKGNwdV9kYXRhW2NwdV0udnBlX2lkID09IDApIHsKLQkJCXRpbWVyX2lu
dGVycnVwdChpcnEsIE5VTEwpOwotCQl9IGVsc2UgewotCQkJd3JpdGVfYzBfY29tcGFyZShyZWFk
X2MwX2NvdW50KCkgKwotCQkJICAgICAgICAgICAgICAgICAobWlwc19ocHRfZnJlcXVlbmN5L0ha
KSk7Ci0JCQlsb2NhbF90aW1lcl9pbnRlcnJ1cHQoaXJxKTsKLQkJfQotCQlzbXRjX3RpbWVyX2Jy
b2FkY2FzdChjcHVfZGF0YVtjcHVdLnZwZV9pZCk7Ci0JfQotI2Vsc2UgLyogQ09ORklHX01JUFNf
TVRfU01UQyAqLwotCWlmIChoYW5kbGVfcGVyZl9pcnEocjIpKQotCQlnb3RvIG91dDsKLQotCWlm
IChyMiAmJiAoKHJlYWRfYzBfY2F1c2UoKSAmICgxIDw8IDMwKSkgPT0gMCkpCi0JCWdvdG8gb3V0
OworCXBsYXRfdGltZXJfc2V0dXAoJm1pcHNfaHB0X2ZyZXF1ZW5jeSk7CiAKLQlpZiAoY3B1ID09
IDApIHsKLQkJLyoKLQkJICogQ1BVIDAgaGFuZGxlcyB0aGUgZ2xvYmFsIHRpbWVyIGludGVycnVw
dCBqb2IgYW5kIHByb2Nlc3MKLQkJICogYWNjb3VudGluZyByZXNldHMgY291bnQvY29tcGFyZSBy
ZWdpc3RlcnMgdG8gdHJpZ2dlciBuZXh0Ci0JCSAqIHRpbWVyIGludC4KLQkJICovCi0JCXRpbWVy
X2ludGVycnVwdChpcnEsIE5VTEwpOwotCX0gZWxzZSB7Ci0JCS8qIEV2ZXJ5b25lIGVsc2UgbmVl
ZHMgdG8gcmVzZXQgdGhlIHRpbWVyIGludCBoZXJlIGFzCi0JCSAgIGxsX2xvY2FsX3RpbWVyX2lu
dGVycnVwdCBkb2Vzbid0ICovCi0JCS8qCi0JCSAqIEZJWE1FOiBuZWVkIHRvIGNvcGUgd2l0aCBj
b3VudGVyIHVuZGVyZmxvdy4KLQkJICogTW9yZSBzdXBwb3J0IG5lZWRzIHRvIGJlIGFkZGVkIHRv
IGtlcm5lbC90aW1lIGZvcgotCQkgKiBjb3VudGVyL3RpbWVyIGludGVycnVwdHMgb24gbXVsdGlw
bGUgQ1BVJ3MKLQkJICovCi0JCXdyaXRlX2MwX2NvbXBhcmUocmVhZF9jMF9jb3VudCgpICsgKG1p
cHNfaHB0X2ZyZXF1ZW5jeS9IWikpOwotCi0JCS8qCi0JCSAqIE90aGVyIENQVXMgc2hvdWxkIGRv
IHByb2ZpbGluZyBhbmQgcHJvY2VzcyBhY2NvdW50aW5nCi0JCSAqLwotCQlsb2NhbF90aW1lcl9p
bnRlcnJ1cHQoaXJxKTsKLQl9Ci1vdXQ6Ci0jZW5kaWYgLyogQ09ORklHX01JUFNfTVRfU01UQyAq
LwotCi0JaXJxX2V4aXQoKTsKKwlpZiAobWlwc19ocHRfZnJlcXVlbmN5ID09IDApCisJCXBhbmlj
KCJUaWNrIHRpbWVyIGZyZXF1ZW5jeSBpcyB1bmtub3duIik7CiB9CiAKIAotYXNtbGlua2FnZSB2
b2lkIGxsX2xvY2FsX3RpbWVyX2ludGVycnVwdChpbnQgaXJxKQotewotCWlycV9lbnRlcigpOwot
CWlmIChzbXBfcHJvY2Vzc29yX2lkKCkgIT0gMCkKLQkJa3N0YXRfdGhpc19jcHUuaXJxc1tpcnFd
Kys7Ci0KLQkvKiB3ZSBrZWVwIGludGVycnVwdCBkaXNhYmxlZCBhbGwgdGhlIHRpbWUgKi8KLQls
b2NhbF90aW1lcl9pbnRlcnJ1cHQoaXJxKTsKLQotCWlycV9leGl0KCk7Ci19Ci0KIC8qCi0gKiB0
aW1lX2luaXQoKSAtIGl0IGRvZXMgdGhlIGZvbGxvd2luZyB0aGluZ3MuCi0gKgotICogMSkgcGxh
dF90aW1lX2luaXQoKSAtCi0gKiAJYSkgKG9wdGlvbmFsKSBzZXQgdXAgUlRDIHJvdXRpbmVzLAot
ICogICAgICBiKSAob3B0aW9uYWwpIGNhbGlicmF0ZSBhbmQgc2V0IHRoZSBtaXBzX2hwdF9mcmVx
dWVuY3kKLSAqCSAgICAob25seSBuZWVkZWQgaWYgeW91IGludGVuZGVkIHRvIHVzZSBjcHUgY291
bnRlciBhcyB0aW1lciBpbnRlcnJ1cHQKLSAqCSAgICAgc291cmNlKQotICogMikgY2FsY3VsYXRl
IGEgY291cGxlIG9mIGNhY2hlZCB2YXJpYWJsZXMgZm9yIGxhdGVyIHVzYWdlCi0gKiAzKSBwbGF0
X3RpbWVyX3NldHVwKCkgLQotICoJYSkgKG9wdGlvbmFsKSBvdmVyLXdyaXRlIGFueSBjaG9pY2Vz
IG1hZGUgYWJvdmUgYnkgdGltZV9pbml0KCkuCi0gKgliKSBtYWNoaW5lIHNwZWNpZmljIGNvZGUg
c2hvdWxkIHNldHVwIHRoZSB0aW1lciBpcnFhY3Rpb24uCi0gKgljKSBlbmFibGUgdGhlIHRpbWVy
IGludGVycnVwdAorICogSWYgeW91IGRvbid0IGtub3cgdGltZXIgJ1gnIGZyZXF1ZW5jeSBhbmQg
aGF2ZSBhbm90aGVyIHRpbWVyICdZJworICogdGhhdCBmbGlwcyBhdCBIWiByYXRlLCB5b3UgY2Fu
IHVzZSB0aGlzIGhlbHBlciB0byBkZXRlcm1pbmF0ZSB0aGUKKyAqIHRpbWVyICdYJyBmcmVxLgog
ICovCi0KLXVuc2lnbmVkIGludCBtaXBzX2hwdF9mcmVxdWVuY3k7Ci0KLXN0YXRpYyBzdHJ1Y3Qg
aXJxYWN0aW9uIHRpbWVyX2lycWFjdGlvbiA9IHsKLQkuaGFuZGxlciA9IHRpbWVyX2ludGVycnVw
dCwKLQkuZmxhZ3MgPSBJUlFGX0RJU0FCTEVEIHwgSVJRRl9QRVJDUFUsCi0JLm5hbWUgPSAidGlt
ZXIiLAotfTsKLQotc3RhdGljIHVuc2lnbmVkIGludCBfX2luaXQgY2FsaWJyYXRlX2hwdCh2b2lk
KQordW5zaWduZWQgX19pbml0IGNhbGlicmF0ZV90aW1lcihjeWNsZV90ICgqeF9yZWFkKSh2b2lk
KSwKKwkJCQlpbnQgKCp5X3N0YXRlKSh2b2lkKSkKIHsKLQljeWNsZV90IGZyZXF1ZW5jeSwgaHB0
X3N0YXJ0LCBocHRfZW5kLCBocHRfY291bnQsIGh6OworCWN5Y2xlX3QgZnJlcSwgc3RhcnQsIGVu
ZCwgY291bnQsIGh6OwogCiAJY29uc3QgaW50IGxvb3BzID0gSFogLyAxMDsKIAlpbnQgbG9nXzJf
bG9vcHMgPSAwOwpAQCAtMzU0LDExOCArOTcsMjQgQEAgc3RhdGljIHVuc2lnbmVkIGludCBfX2lu
aXQgY2FsaWJyYXRlX2hwdCh2b2lkKQogCS8qCiAJICogV2FpdCBmb3IgYSByaXNpbmcgZWRnZSBv
ZiB0aGUgdGltZXIgaW50ZXJydXB0LgogCSAqLwotCXdoaWxlIChtaXBzX3RpbWVyX3N0YXRlKCkp
OwotCXdoaWxlICghbWlwc190aW1lcl9zdGF0ZSgpKTsKKwl3aGlsZSAoeV9zdGF0ZSgpKTsKKwl3
aGlsZSAoIXlfc3RhdGUoKSk7CiAKIAkvKgogCSAqIE5vdyBzZWUgaG93IG1hbnkgaGlnaCBwcmVj
aXNpb24gdGltZXIgdGlja3MgaGFwcGVuCiAJICogZHVyaW5nIHRoZSBjYWxjdWxhdGVkIG51bWJl
ciBvZiBwZXJpb2RzIGJldHdlZW4gdGltZXIKIAkgKiBpbnRlcnJ1cHRzLgogCSAqLwotCWhwdF9z
dGFydCA9IGNsb2Nrc291cmNlX21pcHMucmVhZCgpOworCXN0YXJ0ID0geF9yZWFkKCk7CiAJZG8g
ewotCQl3aGlsZSAobWlwc190aW1lcl9zdGF0ZSgpKTsKLQkJd2hpbGUgKCFtaXBzX3RpbWVyX3N0
YXRlKCkpOworCQl3aGlsZSAoeV9zdGF0ZSgpKTsKKwkJd2hpbGUgKCF5X3N0YXRlKCkpOwogCX0g
d2hpbGUgKC0taSk7Ci0JaHB0X2VuZCA9IGNsb2Nrc291cmNlX21pcHMucmVhZCgpOworCWVuZCA9
IHhfcmVhZCgpOwogCi0JaHB0X2NvdW50ID0gKGhwdF9lbmQgLSBocHRfc3RhcnQpICYgY2xvY2tz
b3VyY2VfbWlwcy5tYXNrOworCWNvdW50ID0gZW5kIC0gc3RhcnQ7CiAJaHogPSBIWjsKLQlmcmVx
dWVuY3kgPSBocHRfY291bnQgKiBoejsKLQotCXJldHVybiBmcmVxdWVuY3kgPj4gbG9nXzJfbG9v
cHM7Ci19Ci0KLXN0cnVjdCBjbG9ja3NvdXJjZSBjbG9ja3NvdXJjZV9taXBzID0gewotCS5uYW1l
CQk9ICJNSVBTIiwKLQkubWFzawkJPSBDTE9DS1NPVVJDRV9NQVNLKDMyKSwKLQkuZmxhZ3MJCT0g
Q0xPQ0tfU09VUkNFX0lTX0NPTlRJTlVPVVMsCi19OwotCi1zdGF0aWMgdm9pZCBfX2luaXQgaW5p
dF9taXBzX2Nsb2Nrc291cmNlKHZvaWQpCi17Ci0JdTY0IHRlbXA7Ci0JdTMyIHNoaWZ0OwotCi0J
aWYgKCFtaXBzX2hwdF9mcmVxdWVuY3kgfHwgY2xvY2tzb3VyY2VfbWlwcy5yZWFkID09IG51bGxf
aHB0X3JlYWQpCi0JCXJldHVybjsKLQotCS8qIENhbGNsYXRlIGEgc29tZXdoYXQgcmVhc29uYWJs
ZSByYXRpbmcgdmFsdWUgKi8KLQljbG9ja3NvdXJjZV9taXBzLnJhdGluZyA9IDIwMCArIG1pcHNf
aHB0X2ZyZXF1ZW5jeSAvIDEwMDAwMDAwOwotCS8qIEZpbmQgYSBzaGlmdCB2YWx1ZSAqLwotCWZv
ciAoc2hpZnQgPSAzMjsgc2hpZnQgPiAwOyBzaGlmdC0tKSB7Ci0JCXRlbXAgPSAodTY0KSBOU0VD
X1BFUl9TRUMgPDwgc2hpZnQ7Ci0JCWRvX2Rpdih0ZW1wLCBtaXBzX2hwdF9mcmVxdWVuY3kpOwot
CQlpZiAoKHRlbXAgPj4gMzIpID09IDApCi0JCQlicmVhazsKLQl9Ci0JY2xvY2tzb3VyY2VfbWlw
cy5zaGlmdCA9IHNoaWZ0OwotCWNsb2Nrc291cmNlX21pcHMubXVsdCA9ICh1MzIpdGVtcDsKLQot
CWNsb2Nrc291cmNlX3JlZ2lzdGVyKCZjbG9ja3NvdXJjZV9taXBzKTsKLX0KLQotdm9pZCBfX2lu
aXQgX193ZWFrIHBsYXRfdGltZV9pbml0KHZvaWQpCi17Ci19Ci0KLXZvaWQgX19pbml0IHRpbWVf
aW5pdCh2b2lkKQotewotCXBsYXRfdGltZV9pbml0KCk7Ci0KLQkvKiBDaG9vc2UgYXBwcm9wcmlh
dGUgaGlnaCBwcmVjaXNpb24gdGltZXIgcm91dGluZXMuICAqLwotCWlmICghY3B1X2hhc19jb3Vu
dGVyICYmICFjbG9ja3NvdXJjZV9taXBzLnJlYWQpCi0JCS8qIE5vIGhpZ2ggcHJlY2lzaW9uIHRp
bWVyIC0tIHNvcnJ5LiAgKi8KLQkJY2xvY2tzb3VyY2VfbWlwcy5yZWFkID0gbnVsbF9ocHRfcmVh
ZDsKLQllbHNlIGlmICghbWlwc19ocHRfZnJlcXVlbmN5ICYmICFtaXBzX3RpbWVyX3N0YXRlKSB7
Ci0JCS8qIEEgaGlnaCBwcmVjaXNpb24gdGltZXIgb2YgdW5rbm93biBmcmVxdWVuY3kuICAqLwot
CQlpZiAoIWNsb2Nrc291cmNlX21pcHMucmVhZCkKLQkJCS8qIE5vIGV4dGVybmFsIGhpZ2ggcHJl
Y2lzaW9uIHRpbWVyIC0tIHVzZSBSNGsuICAqLwotCQkJY2xvY2tzb3VyY2VfbWlwcy5yZWFkID0g
YzBfaHB0X3JlYWQ7Ci0JfSBlbHNlIHsKLQkJLyogV2Uga25vdyBjb3VudGVyIGZyZXF1ZW5jeS4g
IE9yIHdlIGNhbiBnZXQgaXQuICAqLwotCQlpZiAoIWNsb2Nrc291cmNlX21pcHMucmVhZCkgewot
CQkJLyogTm8gZXh0ZXJuYWwgaGlnaCBwcmVjaXNpb24gdGltZXIgLS0gdXNlIFI0ay4gICovCi0J
CQljbG9ja3NvdXJjZV9taXBzLnJlYWQgPSBjMF9ocHRfcmVhZDsKLQotCQkJaWYgKCFtaXBzX3Rp
bWVyX3N0YXRlKSB7Ci0JCQkJLyogTm8gZXh0ZXJuYWwgdGltZXIgaW50ZXJydXB0IC0tIHVzZSBS
NGsuICAqLwotCQkJCW1pcHNfdGltZXJfYWNrID0gYzBfdGltZXJfYWNrOwotCQkJCS8qIENhbGN1
bGF0ZSBjYWNoZSBwYXJhbWV0ZXJzLiAgKi8KLQkJCQljeWNsZXNfcGVyX2ppZmZ5ID0KLQkJCQkJ
KG1pcHNfaHB0X2ZyZXF1ZW5jeSArIEhaIC8gMikgLyBIWjsKLQkJCQkvKgotCQkJCSAqIFRoaXMg
c2V0cyB1cCB0aGUgaGlnaCBwcmVjaXNpb24KLQkJCQkgKiB0aW1lciBmb3IgdGhlIGZpcnN0IGlu
dGVycnVwdC4KLQkJCQkgKi8KLQkJCQljMF9ocHRfdGltZXJfaW5pdCgpOwotCQkJfQotCQl9Ci0J
CWlmICghbWlwc19ocHRfZnJlcXVlbmN5KQotCQkJbWlwc19ocHRfZnJlcXVlbmN5ID0gY2FsaWJy
YXRlX2hwdCgpOwotCi0JCS8qIFJlcG9ydCB0aGUgaGlnaCBwcmVjaXNpb24gdGltZXIgcmF0ZSBm
b3IgYSByZWZlcmVuY2UuICAqLwotCQlwcmludGsoIlVzaW5nICV1LiUwM3UgTUh6IGhpZ2ggcHJl
Y2lzaW9uIHRpbWVyLlxuIiwKLQkJICAgICAgICgobWlwc19ocHRfZnJlcXVlbmN5ICsgNTAwKSAv
IDEwMDApIC8gMTAwMCwKLQkJICAgICAgICgobWlwc19ocHRfZnJlcXVlbmN5ICsgNTAwKSAvIDEw
MDApICUgMTAwMCk7Ci0JfQotCi0JaWYgKCFtaXBzX3RpbWVyX2FjaykKLQkJLyogTm8gdGltZXIg
aW50ZXJydXB0IGFjayAoZS5nLiBpODI1NCkuICAqLwotCQltaXBzX3RpbWVyX2FjayA9IG51bGxf
dGltZXJfYWNrOwotCi0JLyoKLQkgKiBDYWxsIGJvYXJkIHNwZWNpZmljIHRpbWVyIGludGVycnVw
dCBzZXR1cC4KLQkgKgotCSAqIHRoaXMgcG9pbnRlciBtdXN0IGJlIHNldHVwIGluIG1hY2hpbmUg
c2V0dXAgcm91dGluZS4KLQkgKgotCSAqIEV2ZW4gaWYgYSBtYWNoaW5lIGNob29zZXMgdG8gdXNl
IGEgbG93LWxldmVsIHRpbWVyIGludGVycnVwdCwKLQkgKiBpdCBzdGlsbCBuZWVkcyB0byBzZXR1
cCB0aGUgdGltZXJfaXJxYWN0aW9uLgotCSAqIEluIHRoYXQgY2FzZSwgaXQgbWlnaHQgYmUgYmV0
dGVyIHRvIHNldCB0aW1lcl9pcnFhY3Rpb24uaGFuZGxlcgotCSAqIHRvIGJlIE5VTEwgZnVuY3Rp
b24gc28gdGhhdCB3ZSBhcmUgc3VyZSB0aGUgaGlnaC1sZXZlbCBjb2RlCi0JICogaXMgbm90IGlu
dm9rZWQgYWNjaWRlbnRhbGx5LgotCSAqLwotCXBsYXRfdGltZXJfc2V0dXAoJnRpbWVyX2lycWFj
dGlvbik7CisJZnJlcSA9IGNvdW50ICogaHo7CiAKLQlpbml0X21pcHNfY2xvY2tzb3VyY2UoKTsK
KwlyZXR1cm4gZnJlcSA+PiBsb2dfMl9sb29wczsKIH0KZGlmZiAtLWdpdCBhL2luY2x1ZGUvYXNt
LW1pcHMvaHB0LmggYi9pbmNsdWRlL2FzbS1taXBzL2hwdC5oCm5ldyBmaWxlIG1vZGUgMTAwNjQ0
CmluZGV4IDAwMDAwMDAuLjJiNjI4MjcKLS0tIC9kZXYvbnVsbAorKysgYi9pbmNsdWRlL2FzbS1t
aXBzL2hwdC5oCkBAIC0wLDAgKzEsMzAgQEAKKyNpZm5kZWYgX0FTTV9IUFRfSAorI2RlZmluZSBf
QVNNX0hQVF9ICisKKyNpZmRlZiBDT05GSUdfQ1AwX0hQVF9USU1FUgorCitzdHJ1Y3QgY3AwX2hw
dF9pbmZvIHsKKwkvKiBGSVhNRTogY291bGQgd2UgbGV0IHRoZSB1c2VyIG92ZXJyaWRlIGhwdCBv
cHMgPyAqLworCS8qIEZJWE1FOiBzaG91bGQgd2UgYWRkIGEgZGlzYWJsZV9pcnEgbWV0aG9kID8g
Ki8KKwlpbnQJCWlycTsKKwl1bnNpZ25lZAkoKmdldF9mcmVxKShpbnQgY3B1KTsKKworCS8qCisJ
ICogVGhlIHBlcmZvcm1hbmNlIGNvdW50ZXIgb3ZlcmZsb3cgaXJxIG1heSBiZSBzaGFyZWQgd2l0
aCB0aGUKKwkgKiBocHQgaW50ZXJydXB0LiBJbiB0aGF0IGNhc2UgdGhpcyBoYW5kbGVyIHdpbGwg
YmUgY2FsbGVkCisJICogZHVyaW5nIGEgaHB0IGludGVycnVwdC4KKwkgKi8KKwlpcnFyZXR1cm5f
dAkoKnBlcmZfaGFuZGxlcikoaW50IGlycSwgdm9pZCAqZGV2X2lkKTsKK307CisKKworZXh0ZXJu
IGludCBzZXR1cF9jcDBfaHB0KHN0cnVjdCBjcDBfaHB0X2luZm8gKmluZm8pOworZXh0ZXJuIHZv
aWQgc2V0dXBfY3AwX2hwdF9jbG9ja2V2ZW50KHZvaWQpOworCisjZWxzZQorCitzdGF0aWMgaW5s
aW5lIHZvaWQgc2V0dXBfY3AwX2hwdF9jbG9ja2V2ZW50KHZvaWQpIHt9CisKKyNlbmRpZgkvKiBD
T05GSUdfQ1AwX0hQVF9USU1FUiAqLworCisjZW5kaWYJLyogX0FTTV9IUFRfSCAqLwpkaWZmIC0t
Z2l0IGEvaW5jbHVkZS9hc20tbWlwcy90aW1lLmggYi9pbmNsdWRlL2FzbS1taXBzL3RpbWUuaApp
bmRleCAzMzY0NWVkLi43ODExMDJiIDEwMDY0NAotLS0gYS9pbmNsdWRlL2FzbS1taXBzL3RpbWUu
aAorKysgYi9pbmNsdWRlL2FzbS1taXBzL3RpbWUuaApAQCAtMTYsMTYgKzE2LDE4IEBACiAjaWZu
ZGVmIF9BU01fVElNRV9ICiAjZGVmaW5lIF9BU01fVElNRV9ICiAKLSNpbmNsdWRlIDxsaW51eC9p
bnRlcnJ1cHQuaD4KLSNpbmNsdWRlIDxsaW51eC9saW5rYWdlLmg+Ci0jaW5jbHVkZSA8bGludXgv
cHRyYWNlLmg+CisjaW5jbHVkZSA8bGludXgvY2xvY2tzb3VyY2UuaD4JLyogY3ljbGVfdCAqLwog
I2luY2x1ZGUgPGxpbnV4L3J0Yy5oPgotI2luY2x1ZGUgPGxpbnV4L3NwaW5sb2NrLmg+Ci0jaW5j
bHVkZSA8bGludXgvY2xvY2tzb3VyY2UuaD4KIAogZXh0ZXJuIHNwaW5sb2NrX3QgcnRjX2xvY2s7
CiAKIC8qCisgKiBtaXBzX2hwdF9mcmVxdWVuY3kgLSBtdXN0IGJlIHNldCBieSB0aGUgcGxhdGZv
cm0gY29kZS4KKyAqIEl0IHNhdmVzIHRoZSB0aWNrIHRpbWVyIGZyZXF1ZW5jeS4KKyAqLworZXh0
ZXJuIHVuc2lnbmVkIGludCBtaXBzX2hwdF9mcmVxdWVuY3k7CisKKy8qCiAgKiBSVEMgb3BzCiAg
Ki8KIGV4dGVybiB1bnNpZ25lZCBsb25nIG1pcHNfcnRjX2dldF90aW1lKHZvaWQpOwpAQCAtNDEs
MTIgKzQzLDYgQEAgZXh0ZXJuIGludCAoKm1pcHNfdGltZXJfc3RhdGUpKHZvaWQpOwogZXh0ZXJu
IHZvaWQgKCptaXBzX3RpbWVyX2Fjaykodm9pZCk7CiAKIC8qCi0gKiBIaWdoIHByZWNpc2lvbiB0
aW1lciBjbG9ja3NvdXJjZS4KLSAqIElmIC5yZWFkIGlzIE5VTEwsIGFuIFI0ay1jb21wYXRpYmxl
IHRpbWVyIHNldHVwIGlzIGF0dGVtcHRlZC4KLSAqLwotZXh0ZXJuIHN0cnVjdCBjbG9ja3NvdXJj
ZSBjbG9ja3NvdXJjZV9taXBzOwotCi0vKgogICogdG9fdG0oKSBjb252ZXJ0cyBzeXN0ZW0gdGlt
ZSBiYWNrIHRvICh5ZWFyLCBtb24sIGRheSwgaG91ciwgbWluLCBzZWMpLgogICogSXQgaXMgaW50
ZW5kZWQgdG8gaGVscCBpbXBsZW1lbnQgcnRjX3NldF90aW1lKCkgZnVuY3Rpb25zLgogICogQ29w
aWVkIGZyb20gUFBDIGltcGxlbWVudGF0aW9uLgpAQCAtNTQsMzIgKzUwLDEyIEBAIGV4dGVybiBz
dHJ1Y3QgY2xvY2tzb3VyY2UgY2xvY2tzb3VyY2VfbWlwczsKIGV4dGVybiB2b2lkIHRvX3RtKHVu
c2lnbmVkIGxvbmcgdGltLCBzdHJ1Y3QgcnRjX3RpbWUgKnRtKTsKIAogLyoKLSAqIGhpZ2gtbGV2
ZWwgdGltZXIgaW50ZXJydXB0IHJvdXRpbmVzLgotICovCi1leHRlcm4gaXJxcmV0dXJuX3QgdGlt
ZXJfaW50ZXJydXB0KGludCBpcnEsIHZvaWQgKmRldl9pZCk7Ci0KLS8qCi0gKiB0aGUgY29ycmVz
cG9uZGluZyBsb3ctbGV2ZWwgdGltZXIgaW50ZXJydXB0IHJvdXRpbmUuCisgKiBib2FyZCBzcGVj
aWZpYyBob29rcyBjYWxsZWQgYnkgdGltZV9pbml0KCkuCiAgKi8KLWV4dGVybiB2b2lkIGxsX3Rp
bWVyX2ludGVycnVwdChpbnQgaXJxKTsKLQotLyoKLSAqIHByb2ZpbGluZyBhbmQgcHJvY2VzcyBh
Y2NvdXRpbmcgaXMgZG9uZSBzZXBhcmF0ZWx5IGluIGxvY2FsX3RpbWVyX2ludGVycnVwdAotICov
Ci1leHRlcm4gdm9pZCBsb2NhbF90aW1lcl9pbnRlcnJ1cHQoaW50IGlycSk7Ci0KLS8qCi0gKiBi
b2FyZCBzcGVjaWZpYyByb3V0aW5lcyByZXF1aXJlZCBieSB0aW1lX2luaXQoKS4KLSAqLwotc3Ry
dWN0IGlycWFjdGlvbjsKIGV4dGVybiB2b2lkIHBsYXRfdGltZV9pbml0KHZvaWQpOwotZXh0ZXJu
IHZvaWQgcGxhdF90aW1lcl9zZXR1cChzdHJ1Y3QgaXJxYWN0aW9uICppcnEpOworZXh0ZXJuIHZv
aWQgcGxhdF90aW1lcl9zZXR1cCh1bnNpZ25lZCAqaHB0X2ZyZXEpOwogCi0vKgotICogbWlwc19o
cHRfZnJlcXVlbmN5IC0gbXVzdCBiZSBzZXQgaWYgeW91IGludGVuZCB0byB1c2UgYW4gUjRrLWNv
bXBhdGlibGUKLSAqIGNvdW50ZXIgYXMgYSB0aW1lciBpbnRlcnJ1cHQgc291cmNlOyBvdGhlcndp
c2UgaXQgY2FuIGJlIHNldCB1cAotICogYXV0b21hZ2ljYWxseSB3aXRoIGFuIGFpZCBvZiBtaXBz
X3RpbWVyX3N0YXRlLgotICovCi1leHRlcm4gdW5zaWduZWQgaW50IG1pcHNfaHB0X2ZyZXF1ZW5j
eTsKK2V4dGVybiB1bnNpZ25lZCBjYWxpYnJhdGVfdGltZXIoY3ljbGVfdCAoKnhfcmVhZCkodm9p
ZCksCisJCQkJaW50ICgqeV9zdGF0ZSkodm9pZCkpOwogCiAjZW5kaWYgLyogX0FTTV9USU1FX0gg
Ki8KLS0gCjEuNS4yLnJjMy1kaXJ0eQoK
------=_Part_62815_6606188.1182087413124--
