Received: with ECARTIS (v1.0.0; list linux-mips); Thu, 26 Oct 2006 14:45:22 +0100 (BST)
Received: from mx.mips.com ([63.167.95.198]:48868 "EHLO dns0.mips.com")
	by ftp.linux-mips.org with ESMTP id S20037847AbWJZNpR (ORCPT
	<rfc822;linux-mips@linux-mips.org>); Thu, 26 Oct 2006 14:45:17 +0100
Received: from mercury.mips.com (mercury [192.168.64.101])
	by dns0.mips.com (8.12.11/8.12.11) with ESMTP id k9QDiSag010538;
	Thu, 26 Oct 2006 06:44:28 -0700 (PDT)
Received: from grendel (grendel [192.168.236.16])
	by mercury.mips.com (8.13.5/8.13.5) with SMTP id k9QDiveA023171;
	Thu, 26 Oct 2006 06:44:57 -0700 (PDT)
Message-ID: <003001c6f905$db2781f0$10eca8c0@grendel>
From:	"Kevin D. Kissell" <kevink@mips.com>
To:	"Ralf Baechle" <ralf@linux-mips.org>,
	"Atsushi Nemoto" <anemo@mba.ocn.ne.jp>
Cc:	<creideiki+linux-mips@ferretporn.se>, <linux-mips@linux-mips.org>
References: <20061024140614.GB27800@linux-mips.org> <6285.136.163.203.3.1161704681.squirrel@www.ferretporn.se> <20061025.174504.71086461.nemoto@toshiba-tops.co.jp> <20061026.130552.11963152.nemoto@toshiba-tops.co.jp> <20061026125624.GA14122@linux-mips.org>
Subject: Re: Extreme system overhead on large IP27
Date:	Thu, 26 Oct 2006 15:51:35 +0200
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 6.00.2800.1807
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1807
Return-Path: <kevink@mips.com>
X-Envelope-To: <"|/home/ecartis/ecartis -s linux-mips"> (uid 0)
X-Orcpt: rfc822;linux-mips@linux-mips.org
Original-Recipient: rfc822;linux-mips@linux-mips.org
X-archive-position: 13101
X-ecartis-version: Ecartis v1.0.0
Sender: linux-mips-bounce@linux-mips.org
Errors-to: linux-mips-bounce@linux-mips.org
X-original-sender: kevink@mips.com
Precedence: bulk
X-list: linux-mips

> On Thu, Oct 26, 2006 at 01:05:52PM +0900, Atsushi Nemoto wrote:
> 
> > I think I found the problem at last.
> 
> I'm afraid there is more than one problem.
> 
> On the 34K core each VPE has its own c0_count and c0_compare registers.
> However the reset values are undefined.  Which means the time offset
> calculated by
> 
>     offset = (clocksource_read(clock) - clock->cycle_last) & clock->mask;
> 
> may differ wildly between processors resulting in a time jitter of upto
> almost 215s between both VPEs.  Unfortunately there is an unavoidable
> race condition when attempting to synchronize the two counters.  But
> the 34K's nature shrinks the time window to somwhere in the single digit
> range of cycles so on a hardcore that would be a handfull of nanoseconds.

I don't see what's different here than in any other SMP case.  Is it really
true that the MIPS SMP support *requires* that all CPUs in the system
come out of reset on the same clock, with the same value in Count?
I find that very surprising (and a little disappointing).  Is this a general
limitation of Linux? MIPS32/MIPS64 PRAs call out the reset value
of Count as being undefined, and chip specs for pre-MIPS32 CPUs
like the R10000 and the R4400 do not call out any reset value for
Count either.

If there's going to be skew between CPU clocks, all it really means
is that one cannot directly compare timestamps generated by different
CPUs.  At a given point in time, "How long will it be until you hit an 
absolute Count value X?"  will have a slightly different answer on each CPU 
if there is skew, but "What will the local Count value be N jiffies from now?"
should be something that can be correctly calculated independently on each 
node. Where are we depending on the former, and can that usage be converted
into something more like the later?

            Regards,

            Kevin K.
