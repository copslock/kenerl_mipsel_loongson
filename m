Received: from sgi.com (sgi.SGI.COM [192.48.153.1])
	by lara.stud.fh-heilbronn.de (8.9.1a/8.9.1) with ESMTP id XAA10567
	for <pstadt@stud.fh-heilbronn.de>; Thu, 26 Aug 1999 23:38:39 +0200
Received: from cthulhu.engr.sgi.com (cthulhu.engr.sgi.com [192.26.80.2]) 
	by sgi.com (980327.SGI.8.8.8-aspam/980304.SGI-aspam:
       SGI does not authorize the use of its proprietary
       systems or networks for unsolicited or bulk email
       from the Internet.) 
	via ESMTP id OAA01001; Thu, 26 Aug 1999 14:27:33 -0700 (PDT)
	mail_from (owner-linux@cthulhu.engr.sgi.com)
Received: (from majordomo-owner@localhost)
	by cthulhu.engr.sgi.com (980427.SGI.8.8.8/970903.SGI.AUTOCF)
	id OAA45312
	for linux-list;
	Thu, 26 Aug 1999 14:20:24 -0700 (PDT)
	mail_from (owner-linux@relay.engr.sgi.com)
Received: from sgi.com (sgi.engr.sgi.com [192.26.80.37])
	by cthulhu.engr.sgi.com (980427.SGI.8.8.8/970903.SGI.AUTOCF)
	via ESMTP id OAA27224
	for <linux@cthulhu.engr.sgi.com>;
	Thu, 26 Aug 1999 14:20:20 -0700 (PDT)
	mail_from (andrewb@uab.edu)
Received: from lilith.dpo.uab.edu (lilith.dpo.uab.edu [138.26.1.128]) 
	by sgi.com (980327.SGI.8.8.8-aspam/980304.SGI-aspam:
       SGI does not authorize the use of its proprietary
       systems or networks for unsolicited or bulk email
       from the Internet.) 
	via ESMTP id OAA09577
	for <linux@cthulhu.engr.sgi.com>; Thu, 26 Aug 1999 14:19:59 -0700 (PDT)
	mail_from (andrewb@uab.edu)
Received: from mdk187.tucc.uab.edu (mdk187.tucc.uab.edu [138.26.15.201])
	by lilith.dpo.uab.edu (8.9.3/8.9.3) with SMTP id QAA28450
	for <linux@cthulhu.engr.sgi.com>; Thu, 26 Aug 1999 16:19:55 -0500
Date: Thu, 26 Aug 1999 16:17:46 -0500 (CDT)
From: "Andrew R. Baker" <andrewb@uab.edu>
X-Sender: andrewb@mdk187.tucc.uab.edu
To: Linux SGI <linux@cthulhu.engr.sgi.com>
Subject: patch to support the EISA bus on the Indigo2
Message-ID: <Pine.LNX.3.96.990826154955.17792C-200000@mdk187.tucc.uab.edu>
MIME-Version: 1.0
Content-Type: MULTIPART/MIXED; BOUNDARY="445303055-905674700-935702266=:17792"
Sender: owner-linux@cthulhu.engr.sgi.com
Precedence: bulk

  This message is in MIME format.  The first part should be readable text,
  while the remaining parts are likely unreadable without MIME-aware tools.
  Send mail to mime@docserver.cac.washington.edu for more info.

--445303055-905674700-935702266=:17792
Content-Type: TEXT/PLAIN; charset=US-ASCII


Here is my initial patch for adding EISA support on the Indigo2.  It has
allowed me to get an ISA Etherlink III running in my Indigo2 with a couple
of changes to the driver.  Several things have yet to be done:  I have not
looked into DMA support;  Interrupts on the EISA bus are not reported via
/proc;  "make config" won't allow you to select any (E)ISA bus network
drivers;  I have not looked at irq probing either.  Also, remember that
many drivers will not work on the Indigo2 because they were written with
only little endian architectures in mind.

Things I want some input on:

1)  Should the #ifdefs for making the support optional be put somewhere
      else, it looks clunky in "indy_int.c".  I thought about putting it
      in i8259.h by creating stubs if support is not supposed to compiled
      in.

2)  Where in the /proc/interrupts output should the (E)ISA interrupts go?
      They have a range from 0-15.  They could be interleaved with the
      current set with an [EISA] tag.  Any opinions?


-Andrew

P.S.  This goes against the 2.2 branch of the CVS tree.

--445303055-905674700-935702266=:17792
Content-Type: TEXT/PLAIN; charset=US-ASCII; name="indigo2.patch.1999.08.26"
Content-ID: <Pine.LNX.3.96.990826161746.17792D@mdk187.tucc.uab.edu>
Content-Description: 
Content-Transfer-Encoding: BASE64

LS0tIGxpbnV4L2luY2x1ZGUvYXNtLW1pcHMvaTgyNTkuaC5vcmlnCVRodSBB
dWcgMjYgMTU6Mjk6NTAgMTk5OQ0KKysrIGxpbnV4L2luY2x1ZGUvYXNtLW1p
cHMvaTgyNTkuaAlXZWQgQXVnIDI1IDE3OjM0OjQ2IDE5OTkNCkBAIC0wLDAg
KzEsMjYgQEANCisvKiANCisgKiBzZ2llaXNhLmg6IERlZmluZXMgZm9yIHRo
ZSAoRSlJU0EgYnVzIG9uIHRoZSBTR0kgSW5kaWdvMg0KKyAqDQorICogQ29w
eXJpZ2h0IChDKSAxOTk5IEFuZHJldyBSLiBCYWtlciAoYW5kcmV3YkB1YWIu
ZWR1KSANCisgKg0KKyAqLw0KKyNpZm5kZWYgX01JUFNfU0dJRUlTQV9IDQor
I2RlZmluZSBfTUlQU19TR0lFSVNBX0gNCisNCisjaWZkZWYgQ09ORklHX1NH
SV9FSVNBDQorZXh0ZXJuIHZvaWQgaTgyNTlfZGlzYWJsZV9pcnEodW5zaWdu
ZWQgaW50KTsNCitleHRlcm4gdm9pZCBpODI1OV9lbmFibGVfaXJxKHVuc2ln
bmVkIGludCk7DQorZXh0ZXJuIGludCBpODI1OV9yZXF1ZXN0X2lycSh1bnNp
Z25lZCBpbnQgaXJxLA0KKwkJCSAgICAgdm9pZCAoKmhhbmRsZXIpKGludCwg
dm9pZCAqLCBzdHJ1Y3QgcHRfcmVncyAqKSwNCisJCQkgICAgIHVuc2lnbmVk
IGxvbmcgZmxhZ3MsDQorCQkJICAgICBjb25zdCBjaGFyICpkZXZpY2UsDQor
CQkJICAgICB2b2lkICpkZXZfaWQpOw0KKw0KK2V4dGVybiB2b2lkIGk4MjU5
X2ZyZWVfaXJxKHVuc2lnbmVkIGludCBpcnEsIHZvaWQgKmRldl9pZCk7DQor
DQorZXh0ZXJuIHZvaWQgaTgyNTlfZG9faXJxKGludCwgc3RydWN0IHB0X3Jl
Z3MgKik7DQorDQorZXh0ZXJuIHZvaWQgaTgyNTlfaW5pdCh2b2lkKTsNCisj
ZW5kaWYgLyogQ09ORklHX1NHSV9FSVNBICovDQorDQorI2VuZGlmIC8qICEo
X01JUFNfU0dJRUlTQV9IKSAqLw0KLS0tIGxpbnV4L2luY2x1ZGUvYXNtLW1p
cHMvc2dpZWlzYS5oLm9yaWcJVGh1IEF1ZyAyNiAxNToyNToxNSAxOTk5DQor
KysgbGludXgvaW5jbHVkZS9hc20tbWlwcy9zZ2llaXNhLmgJVGh1IEF1ZyAy
NiAxNjowNzozNiAxOTk5DQpAQCAtMCwwICsxLDMyIEBADQorLyogDQorICog
c2dpZWlzYS5oOiBEZWZpbmVzIGZvciB0aGUgKEUpSVNBIGJ1cyBvbiB0aGUg
U0dJIEluZGlnbzINCisgKg0KKyAqIENvcHlyaWdodCAoQykgMTk5OSBBbmRy
ZXcgUi4gQmFrZXIgKGFuZHJld2JAdWFiLmVkdSkgDQorICoNCisgKi8NCisj
aWZuZGVmIF9NSVBTX1NHSUVJU0FfSA0KKyNkZWZpbmUgX01JUFNfU0dJRUlT
QV9IDQorDQorI2RlZmluZSBTR0lfRUlTQV9CQVNFIDB4MDAwODAwMDANCisN
CisvKiBFSVUgcmVnaXN0ZXJzICovDQorI2RlZmluZSBTR0lfRUlVX0JBU0Ug
MHgwMDA5ZmZjMA0KKw0KK3N0cnVjdCBzZ2lfZWl1X3JlZ3Mgew0KKwl2b2xh
dGlsZSB1bnNpZ25lZCBsb25nIG1vZGU7DQorCXZvbGF0aWxlIHVuc2lnbmVk
IGxvbmcgc3RhdHVzOw0KKwl2b2xhdGlsZSB1bnNpZ25lZCBsb25nIHByZW1w
dDsNCisJdm9sYXRpbGUgdW5zaWduZWQgbG9uZyBxdWlldDsNCit9Ow0KKw0K
Kw0KKyNkZWZpbmUgU0dJX0VJU0FfTk1JX0JBU0UgMHgwMDA4MDQ2MQ0KKw0K
K3N0cnVjdCBzZ2lfZWlzYV9ubWlfcmVncyB7IA0KKwl2b2xhdGlsZSB1bnNp
Z25lZCBjaGFyIHJlc2V0Ow0KKwl2b2xhdGlsZSB1bnNpZ25lZCBjaGFyIHBv
cnQ7DQorfTsNCisNCitleHRlcm4gdm9pZCBzZ2lfZWlzYV9pbml0KHZvaWQp
Ow0KKw0KKyNlbmRpZiAvKiAhKF9NSVBTX1NHSUVJU0FfSCkgKi8NCi0tLSBs
aW51eC9pbmNsdWRlL2FzbS1taXBzL3NnaW50MjMuaC5vcmlnCVRodSBBdWcg
MjYgMTU6Mjk6MTIgMTk5OQ0KKysrIGxpbnV4L2luY2x1ZGUvYXNtLW1pcHMv
c2dpbnQyMy5oCVRodSBBdWcgMjYgMTU6Mjg6NTQgMTk5OQ0KQEAgLTIsNyAr
Miw5IEBADQogICogc2dpbnQyMy5oOiBEZWZpbmVzIGZvciB0aGUgU0dJIElO
VDIgYW5kIElOVDMgY2hpcHNldHMuDQogICoNCiAgKiBDb3B5cmlnaHQgKEMp
IDE5OTYgRGF2aWQgUy4gTWlsbGVyIChkbUBlbmdyLnNnaS5jb20pDQotICog
Q29weXJpZ2h0IChDKSAxOTk5IEFuZHJldyBSLiBCYWtlciAoYW5kcmV3YkB1
YWIuZWR1KSAtIElOVDIgY29ycmVjdGlvbnMNCisgKiBDb3B5cmlnaHQgKEMp
IDE5OTkgQW5kcmV3IFIuIEJha2VyIChhbmRyZXdiQHVhYi5lZHUpIA0KKyAq
IAkJLSBJTlQyIGNvcnJlY3Rpb25zDQorICogCQktIEVJU0EgYWRkaXRpb25z
DQogICovDQogI2lmbmRlZiBfTUlQU19TR0lOVDIzX0gNCiAjZGVmaW5lIF9N
SVBTX1NHSU5UMjNfSA0KQEAgLTEyLDEzICsxNCwxNCBAQA0KICAqIHRoYXQg
cGFydGljdWxhciBJUlEgb24gYW4gU0dJIG1hY2hpbmUuICBBZGQgbmV3ICdz
cGFjZXMnIGFzIG5ldw0KICAqIElSUSBoYXJkd2FyZSBpcyBzdXBwb3J0ZWQu
DQogICovDQotI2RlZmluZSBTR0lOVF9MT0NBTDAgICAwICAgLyogSU5EWSBo
YXMgOCBsb2NhbDAgaXJxIGxldmVscyAqLw0KLSNkZWZpbmUgU0dJTlRfTE9D
QUwxICAgOCAgIC8qIElORFkgaGFzIDggbG9jYWwxIGlycSBsZXZlbHMgKi8N
Ci0jZGVmaW5lIFNHSU5UX0xPQ0FMMiAgIDE2ICAvKiBJTkRZIGhhcyA4IGxv
Y2FsMiB2ZWN0b3JlZCBpcnEgbGV2ZWxzICovDQotI2RlZmluZSBTR0lOVF9M
T0NBTDMgICAyNCAgLyogSU5EWSBoYXMgOCBsb2NhbDMgdmVjdG9yZWQgaXJx
IGxldmVscyAqLw0KLSNkZWZpbmUgU0dJTlRfR0lPICAgICAgMzIgIC8qIElO
RFkgaGFzIDkgR0lPIGlycSBsZXZlbHMgKi8NCi0jZGVmaW5lIFNHSU5UX0hQ
Q0RNQSAgIDQxICAvKiBJTkRZIGhhcyAxMSBIUENETUEgaXJxIF9zb3VyY2Vz
XyAqLw0KLSNkZWZpbmUgU0dJTlRfRU5EICAgICAgNTIgIC8qIEVuZCBvZiAn
c3BhY2VzJyAqLw0KKyNkZWZpbmUgU0dJTlRfRUlTQSAgICAgMCAgIC8qIElu
ZGlnbzIgaGFzIEVJU0EgaW50ZXJydXB0cyAwLTE1ICovICANCisjZGVmaW5l
IFNHSU5UX0xPQ0FMMCAgIDE2ICAvKiBJTkRZIGhhcyA4IGxvY2FsMCBpcnEg
bGV2ZWxzICovDQorI2RlZmluZSBTR0lOVF9MT0NBTDEgICAyNCAgLyogSU5E
WSBoYXMgOCBsb2NhbDEgaXJxIGxldmVscyAqLw0KKyNkZWZpbmUgU0dJTlRf
TE9DQUwyICAgMzIgIC8qIElORFkgaGFzIDggbG9jYWwyIHZlY3RvcmVkIGly
cSBsZXZlbHMgKi8NCisjZGVmaW5lIFNHSU5UX0xPQ0FMMyAgIDQwICAvKiBJ
TkRZIGhhcyA4IGxvY2FsMyB2ZWN0b3JlZCBpcnEgbGV2ZWxzICovDQorI2Rl
ZmluZSBTR0lOVF9HSU8gICAgICA0OCAgLyogSU5EWSBoYXMgOSBHSU8gaXJx
IGxldmVscyAqLw0KKyNkZWZpbmUgU0dJTlRfSFBDRE1BICAgNTcgIC8qIElO
RFkgaGFzIDExIEhQQ0RNQSBpcnEgX3NvdXJjZXNfICovDQorI2RlZmluZSBT
R0lOVF9FTkQgICAgICA2OCAgLyogRW5kIG9mICdzcGFjZXMnICovDQogDQog
LyogSW5kaXZpZHVhbCBpbnRlcnJ1cHQgZGVmaW5pdGlvbnMgZm9yIHRoZSBJ
TkRZIGFuZCBJbmRpZ28yDQogICovDQotLS0gbGludXgvaW5pdC9tYWluLmMu
b3JpZwlUaHUgQXVnIDI2IDE1OjQ0OjQ4IDE5OTkNCisrKyBsaW51eC9pbml0
L21haW4uYwlUdWUgQXVnIDI0IDEyOjI1OjQ2IDE5OTkNCkBAIC05Nyw2ICs5
NywxMCBAQA0KIGV4dGVybiB2b2lkIGVjYXJkX2luaXQodm9pZCk7DQogI2Vu
ZGlmDQogDQorI2lmZGVmIENPTkZJR19TR0lfRUlTQQ0KK2V4dGVybiB2b2lk
IHNnaV9laXNhX2luaXQodm9pZCk7DQorI2VuZGlmDQorDQogZXh0ZXJuIHZv
aWQgc21wX3NldHVwKGNoYXIgKnN0ciwgaW50ICppbnRzKTsNCiAjaWZkZWYg
X19pMzg2X18NCiBleHRlcm4gdm9pZCBpb2FwaWNfcGlycV9zZXR1cChjaGFy
ICpzdHIsIGludCAqaW50cyk7DQpAQCAtODc4LDYgKzg4Miw3IEBADQogfTsN
CiANCiBzdGF0aWMgc3RydWN0IGtlcm5lbF9wYXJhbSByYXdfcGFyYW1zW10g
X19pbml0ZGF0YSA9IHsNCisJeyAiT1NMb2FkT3B0aW9ucz0iLCByb290X2Rl
dl9zZXR1cCB9LA0KIAl7ICJyb290PSIsIHJvb3RfZGV2X3NldHVwIH0sDQog
I2lmZGVmIENPTkZJR19ST09UX05GUw0KIAl7ICJuZnNyb290PSIsIG5mc19y
b290X3NldHVwIH0sDQpAQCAtMTMwMyw2ICsxMzA4LDEwIEBADQogI2VuZGlm
DQogI2lmZGVmIENPTkZJR19UQw0KIAl0Y19pbml0KCk7DQorI2VuZGlmDQor
CQ0KKyNpZiBkZWZpbmVkKENPTkZJR19TR0lfRUlTQSkNCisJc2dpX2Vpc2Ff
aW5pdCgpOw0KICNlbmRpZg0KIA0KIAkvKiBOZXR3b3JraW5nIGluaXRpYWxp
emF0aW9uIG5lZWRzIGEgcHJvY2VzcyBjb250ZXh0ICovIA0KLS0tIGxpbnV4
L2FyY2gvbWlwcy9jb25maWcuaW4ub3JpZwlUaHUgQXVnIDI2IDE1OjQzOjA3
IDE5OTkNCisrKyBsaW51eC9hcmNoL21pcHMvY29uZmlnLmluCVRodSBBdWcg
MjYgMTU6NDM6MTcgMTk5OQ0KQEAgLTcwLDYgKzcwLDkgQEANCiAgIGZpDQog
ICBib29sICcgICBCYWNrd2FyZC1jb21wYXRpYmxlIC9wcm9jL3BjaScgQ09O
RklHX1BDSV9PTERfUFJPQw0KIGZpDQoraWYgWyAiJENPTkZJR19TR0kiID0g
InkiIC1hICIkQ09ORklHX0VYUEVSSU1FTlRBTCIgPSAieSIgXTsgdGhlbg0K
Kwlib29sICdTR0kgKEUpSVNBIHN1cHBvcnQgKGV4cGVyaW1lbnRhbCknIENP
TkZJR19TR0lfRUlTQQ0KK2ZpDQogDQogaWYgWyAiJENPTkZJR19ERUNTVEFU
SU9OIiA9ICJ5IiBdOyB0aGVuDQogICBkZWZpbmVfYm9vbCBDT05GSUdfQ1BV
X0xJVFRMRV9FTkRJQU4geQ0KLS0tIGxpbnV4L2FyY2gvbWlwcy9zZ2kva2Vy
bmVsL01ha2VmaWxlLm9yaWcJVGh1IEF1ZyAyNiAxNTo0MDo1OCAxOTk5DQor
KysgbGludXgvYXJjaC9taXBzL3NnaS9rZXJuZWwvTWFrZWZpbGUJVGh1IEF1
ZyAyNiAxNTo0MDo0MCAxOTk5DQpAQCAtMTUsOCArMTUsMTMgQEANCiANCiBP
QkpTICA9IGluZHlfbWMubyBpbmR5X3NjLm8gaW5keV9ocGMubyBpbmR5X2lu
dC5vIGluZHlfcnRjLm8gXA0KICAgICAgICAgc3lzdGVtLm8gaW5keV90aW1l
ci5vIGluZHlJUlEubyByZXNldC5vIHNldHVwLm8gdGltZS5vDQorDQogaWZk
ZWYgQ09ORklHX1NHSV9QUk9NX0NPTlNPTEUNCiBPQkpTICs9IHByb21jb24u
bw0KK2VuZGlmDQorDQoraWZkZWYgQ09ORklHX1NHSV9FSVNBDQorT0JKUyAr
PQllaXNhLm8gaTgyNTkubw0KIGVuZGlmDQogDQogYWxsOiBzZ2lrZXJuLmEN
Ci0tLSBsaW51eC9hcmNoL21pcHMvc2dpL2tlcm5lbC9pbmR5X21jLmMub3Jp
ZwlUaHUgQXVnIDI2IDE1OjM3OjA1IDE5OTkNCisrKyBsaW51eC9hcmNoL21p
cHMvc2dpL2tlcm5lbC9pbmR5X21jLmMJVGh1IEF1ZyAyNiAxNjowOTowOCAx
OTk5DQpAQCAtMTcsNiArMTcsOCBAQA0KIA0KIC8qICNkZWZpbmUgREVCVUdf
U0dJTUMgKi8NCiANCitleHRlcm4gaW50IHNnaV9laXNhX2J1czsNCisNCiBz
dHJ1Y3Qgc2dpbWNfbWlzY19jdHJsICptY21pc2NfcmVnczsNCiB1bnNpZ25l
ZCBsb25nICpycHNzY291bnRlcjsNCiBzdHJ1Y3Qgc2dpbWNfZG1hX2N0cmwg
KmRtYWN0cmxyZWdzOw0KQEAgLTU4LDE2ICs2MCwxNiBAQA0KIAlwcmludGso
Ik1DOiBTR0kgbWVtb3J5IGNvbnRyb2xsZXIgUmV2aXNpb24gJWRcbiIsDQog
CSAgICAgICAoaW50KSBtY21pc2NfcmVncy0+c3lzdGVtaWQgJiBTR0lNQ19T
WVNJRF9NQVNLUkVWKTsNCiANCi0jaWYgMCAvKiBYWFggVW50aWwgSSBmaWd1
cmUgb3V0IHdoYXQgdGhpcyBiaXQgcmVhbGx5IGluZGljYXRlcyBYWFggKi8N
CisJLyogWFhYIFVudGlsIEkgZmlndXJlIG91dCB3aGF0IHRoaXMgYml0IHJl
YWxseSBpbmRpY2F0ZXMgWFhYICovDQorCS8qIGl0IHNob3VsZCBpbmRpY2F0
ZSB3aGV0aGVyIHdlIGhhdmUgYW4gKEUpSVNBIGJ1cyBvciBub3QgLUFuZHJl
dyAqLw0KIAkvKiBYWFggSXMgdGhpcyBzeXN0ZW1pZCBiaXQgcmVsaWFibGU/
ICovDQogCWlmKG1jbWlzY19yZWdzLT5zeXN0ZW1pZCAmIFNHSU1DX1NZU0lE
X0VQUkVTRU5UKSB7DQotCQlFSVNBX2J1cyA9IDE7DQorCQlzZ2lfZWlzYV9i
dXMgPSAxOw0KIAkJcHJpbnRrKCJ3aXRoIEVJU0FcbiIpOw0KIAl9IGVsc2Ug
ew0KLQkJRUlTQV9idXMgPSAwOw0KKwkJc2dpX2Vpc2FfYnVzID0gMDsNCiAJ
CXByaW50aygibm8gRUlTQVxuIik7DQogCX0NCi0jZW5kaWYNCiANCiAjaWZk
ZWYgREVCVUdfU0dJTUMNCiAJcHJvbV9wcmludGYoInNnaW1jX2luaXQ6IG1l
bWNvbmZpZzA8JXM+IG1jb25maWcxPCVzPlxuIiwNCi0tLSBsaW51eC9hcmNo
L21pcHMvc2dpL2tlcm5lbC9pbmR5X2ludC5jLm9yaWcJVGh1IEF1ZyAyNiAx
NTozODo0MSAxOTk5DQorKysgbGludXgvYXJjaC9taXBzL3NnaS9rZXJuZWwv
aW5keV9pbnQuYwlXZWQgQXVnIDI1IDE3OjIzOjI3IDE5OTkNCkBAIC04LDYg
KzgsNyBAQA0KICAqIENvcHlyaWdodCAoQykgMTk5OSBBbmRyZXcgUi4gQmFr
ZXIgKGFuZHJld2JAdWFiLmVkdSkgDQogICogICAgICAgICAgICAgICAgICAg
IC0gSW5kaWdvMiBjaGFuZ2VzDQogICogICAgICAgICAgICAgICAgICAgIC0g
SW50ZXJydXB0IGhhbmRsaW5nIGZpeGVzDQorICogICAgICAgICAgICAgICAg
ICAgIC0gRUlTQSBzdXBwb3J0DQogICovDQogI2luY2x1ZGUgPGxpbnV4L2Nv
bmZpZy5oPg0KICNpbmNsdWRlIDxsaW51eC9pbml0Lmg+DQpAQCAtNDAsNiAr
NDEsMTAgQEANCiAjaW5jbHVkZSA8YXNtL3NnaWFsaWIuaD4NCiAjaW5jbHVk
ZSA8YXNtL2dkYi1zdHViLmg+DQogDQorI2lmZGVmIENPTkZJR19TR0lfRUlT
QQ0KKyAgI2luY2x1ZGUgPGFzbS9zZ2llaXNhLmg+DQorI2VuZGlmDQorDQog
LyogI2RlZmluZSBERUJVR19TR0lOVCAqLw0KIA0KIHN0cnVjdCBzZ2lfaW50
Ml9yZWdzICpzZ2lfaTJyZWdzOw0KQEAgLTE0NiwxNCArMTUxLDIwIEBADQog
CQlwcmludGsoIndoZWUsIGludmFsaWQgaXJxX25yICVkXG4iLCBpcnFfbnIp
Ow0KIAkJcGFuaWMoIklSUSwgeW91IGxvc2UuLi4iKTsNCiAJfQ0KLQlpZihu
ID49IFNHSU5UX0xPQ0FMMCAmJiBuIDwgU0dJTlRfR0lPKSB7DQorCWlmKG4g
Pj0gU0dJTlRfRUlTQSAmJiBuIDwgU0dJTlRfTE9DQUwwKSB7DQorI2lmZGVm
IENPTkZJR19TR0lfRUlTQQ0KKwkJaTgyNTlfZGlzYWJsZV9pcnEobiAtIFNH
SU5UX0VJU0EpOw0KKyNlbHNlDQorCQlwcmludGsoIk5vIChFKUlTQSBzdXBw
b3J0LiIpOw0KKyNlbmRpZg0KKwl9IGVsc2UgaWYobiA+PSBTR0lOVF9MT0NB
TDAgJiYgbiA8IFNHSU5UX0dJTykgew0KIAkJZGlzYWJsZV9sb2NhbF9pcnEo
biAtIFNHSU5UX0xPQ0FMMCk7DQogCX0gZWxzZSBpZihuID49IFNHSU5UX0dJ
TyAmJiBuIDwgU0dJTlRfSFBDRE1BKSB7DQogCQlkaXNhYmxlX2dpb19pcnEo
biAtIFNHSU5UX0dJTyk7DQogCX0gZWxzZSBpZihuID49IFNHSU5UX0hQQ0RN
QSAmJiBuIDwgU0dJTlRfRU5EKSB7DQogCQlkaXNhYmxlX2hwY2RtYV9pcnEo
biAtIFNHSU5UX0hQQ0RNQSk7DQogCX0gZWxzZSB7DQotCQlwYW5pYygiaG93
IGRpZCBJIGdldCBoZXJlPyIpOw0KKwkJcGFuaWMoImhvdyBkaWQgSSBnZXQg
aGVyZT8gKCVpKSIsIGlycV9ucik7DQogCX0NCiB9DQogDQpAQCAtMTY0LDE0
ICsxNzUsMjAgQEANCiAJCXByaW50aygid2hlZSwgaW52YWxpZCBpcnFfbnIg
JWRcbiIsIGlycV9ucik7DQogCQlwYW5pYygiSVJRLCB5b3UgbG9zZS4uLiIp
Ow0KIAl9DQotCWlmKG4gPj0gU0dJTlRfTE9DQUwwICYmIG4gPCBTR0lOVF9H
SU8pIHsNCisJaWYobiA+PSBTR0lOVF9FSVNBICYmIG4gPCBTR0lOVF9MT0NB
TDApIHsNCisjaWZkZWYgQ09ORklHX1NHSV9FSVNBDQorCQlpODI1OV9lbmFi
bGVfaXJxKG4gLSBTR0lOVF9FSVNBKTsNCisjZWxzZQ0KKwkJcHJpbnRrKCJO
byAoRSlJU0Egc3VwcG9ydC5cbiIpOw0KKyNlbmRpZg0KKwl9IGlmKG4gPj0g
U0dJTlRfTE9DQUwwICYmIG4gPCBTR0lOVF9HSU8pIHsNCiAJCWVuYWJsZV9s
b2NhbF9pcnEobiAtIFNHSU5UX0xPQ0FMMCk7DQogCX0gZWxzZSBpZihuID49
IFNHSU5UX0dJTyAmJiBuIDwgU0dJTlRfSFBDRE1BKSB7DQogCQllbmFibGVf
Z2lvX2lycShuIC0gU0dJTlRfR0lPKTsNCiAJfSBlbHNlIGlmKG4gPj0gU0dJ
TlRfSFBDRE1BICYmIG4gPCBTR0lOVF9FTkQpIHsNCiAJCWVuYWJsZV9ocGNk
bWFfaXJxKG4gLSBTR0lOVF9IUENETUEpOw0KIAl9IGVsc2Ugew0KLQkJcGFu
aWMoImhvdyBkaWQgSSBnZXQgaGVyZT8iKTsNCisJCXBhbmljKCJob3cgZGlk
IEkgZ2V0IGhlcmU/ICglaSkiLCBpcnFfbnIpOw0KIAl9DQogfQ0KIA0KQEAg
LTM1NSw2ICszNzIsNyBAQA0KIAlrZnJlZShhY3Rpb24pOw0KIH0NCiANCisN
CiBpbnQgcmVxdWVzdF9pcnEodW5zaWduZWQgaW50IGlycSwgDQogCQl2b2lk
ICgqaGFuZGxlcikoaW50LCB2b2lkICosIHN0cnVjdCBwdF9yZWdzICopLA0K
IAkJdW5zaWduZWQgbG9uZyBpcnFmbGFncywgDQpAQCAtMzY4LDcgKzM4Niwx
NiBAQA0KIAkJcmV0dXJuIC1FSU5WQUw7DQogCWlmICghaGFuZGxlcikNCiAJ
CXJldHVybiAtRUlOVkFMOw0KLQ0KKwkNCisJaWYoKGlycSA+PSBTR0lOVF9F
SVNBKSAmJiAoaXJxIDwgU0dJTlRfTE9DQUwwKSkNCisjaWZkZWYgQ09ORklH
X1NHSV9FSVNBDQorCQlyZXR1cm4gaTgyNTlfcmVxdWVzdF9pcnEoaXJxLCBo
YW5kbGVyLCBpcnFmbGFncywgZGV2bmFtZSwgZGV2X2lkKTsNCisjZWxzZQ0K
Kwl7DQorCQlwcmludGsoIk5vIChFKUlTQSBzdXBwb3J0LiIpOw0KKwkJcmV0
dXJuIC1FSU5WQUw7DQorCX0NCisjZW5kaWYNCiAJaWYoKGlycSA+PSBTR0lO
VF9MT0NBTDApICYmIChpcnEgPCBTR0lOVF9HSU8pKQ0KIAkJcmV0dXJuIHJl
cXVlc3RfbG9jYWxfaXJxKGlycSwgaGFuZGxlciwgaXJxZmxhZ3MsIGRldm5h
bWUsIGRldl9pZCk7DQogDQpAQCAtMzk3LDYgKzQyNCwxNCBAQA0KIA0KIAlp
ZiAoaXJxID49IFNHSU5UX0VORCkgew0KIAkJcHJpbnRrKCJUcnlpbmcgdG8g
ZnJlZSBJUlElZFxuIixpcnEpOw0KKwkJcmV0dXJuOw0KKwl9DQorCWlmKChp
cnEgPj0gU0dJTlRfRUlTQSkgJiYgKGlycSA8U0dJTlRfTE9DQUwwKSkgew0K
KyNpZmRlZiBDT05GSUdfU0dJX0VJU0ENCisJCWk4MjU5X2ZyZWVfaXJxKGly
cSwgZGV2X2lkKTsNCisjZWxzZQ0KKwkJcHJpbnRrKCJObyAoRSlJU0Egc3Vw
cG9ydC5cbiIpOw0KKyNlbmRpZg0KIAkJcmV0dXJuOw0KIAl9DQogCWlmKChp
cnEgPj0gU0dJTlRfTE9DQUwwKSAmJiAoaXJxIDwgU0dJTlRfR0lPKSkgew0K
LS0tIGxpbnV4L2FyY2gvbWlwcy9zZ2kva2VybmVsL2k4MjU5LmMub3JpZwlU
aHUgQXVnIDI2IDE1OjM2OjMwIDE5OTkNCisrKyBsaW51eC9hcmNoL21pcHMv
c2dpL2tlcm5lbC9pODI1OS5jCVRodSBBdWcgMjYgMTU6NDg6MzMgMTk5OQ0K
QEAgLTAsMCArMSwyNTMgQEANCisvKg0KKyAqDQorICogaTgyNTkuYzogIEdl
bmVyaWMgc3VwcG9ydCBmb3IgdGhlIGk4MjU5IFBJQw0KKyAqDQorICogQ29k
ZSBjb3BpZWQgZnJvbSBhcmNoL21pcHMva2VybmVsL2lycS5jIHdpdGggbWlu
b3IgY2hhbmdlcy4NCisgKg0KKyAqICBUaGlzIHNob3VsZCByZWFsbHkgZ28g
aW50byBzb21lIGFyY2hpdGVjdHVyZSBpbmRlcGVuZGVudCBwbGFjZQ0KKyAq
Lw0KKw0KKyNpbmNsdWRlIDxsaW51eC9lcnJuby5oPg0KKyNpbmNsdWRlIDxs
aW51eC9pbml0Lmg+DQorI2luY2x1ZGUgPGxpbnV4L2tlcm5lbC5oPg0KKyNp
bmNsdWRlIDxsaW51eC9rZXJuZWxfc3RhdC5oPg0KKyNpbmNsdWRlIDxsaW51
eC9zY2hlZC5oPg0KKyNpbmNsdWRlIDxsaW51eC9pbnRlcnJ1cHQuaD4NCisj
aW5jbHVkZSA8bGludXgvbWFsbG9jLmg+DQorI2luY2x1ZGUgPGxpbnV4L3Jh
bmRvbS5oPg0KKw0KKyNpbmNsdWRlIDxhc20vaW8uaD4NCisjaW5jbHVkZSA8
YXNtL3B0cmFjZS5oPg0KKyNpbmNsdWRlIDxhc20vc2dpbnQyMy5oPg0KKyNp
bmNsdWRlIDxhc20vaTgyNTkuaD4NCisNCisvKg0KKyAqIFRoaXMgY29udGFp
bnMgdGhlIGlycSBtYXNrIGZvciBib3RoIDgyNTlBIGlycSBjb250cm9sbGVy
cywgaXQncyBhbg0KKyAqIGludCBzbyB3ZSBjYW4gZGVhbCB3aXRoIHRoZSB0
aGlyZCBQSUMgaW4gc29tZSBzeXN0ZW1zIGxpa2UgdGhlIFJNMzAwLg0KKyAq
Lw0KKw0KK3N0YXRpYyB1bnNpZ25lZCBpbnQgY2FjaGVkX2lycV9tYXNrID0g
MHhmZmZiOw0KKw0KKyNkZWZpbmUgX19ieXRlKHgseSkgKCgodW5zaWduZWQg
Y2hhciAqKSYoeSkpW3hdKQ0KKy8vI2RlZmluZSBfX3dvcmQoeCx5KSAoKCh1
bnNpZ25lZCBzaG9ydCAqKSYoeSkpW3hdKQ0KKy8vI2RlZmluZSBfX2xvbmco
eCx5KSAoKCh1bnNpZ25lZCBpbnQgKikmKHkpKVt4XSkNCisNCisvKiBUaGVz
ZSBhcmUgZm9yIGJpZyBlbmRpYW4gbWFjaGluZXMgKi8NCisjZGVmaW5lIGNh
Y2hlZF8yMSAgICAgICAoX19ieXRlKDMsY2FjaGVkX2lycV9tYXNrKSkNCisj
ZGVmaW5lIGNhY2hlZF9BMSAgICAgICAoX19ieXRlKDIsY2FjaGVkX2lycV9t
YXNrKSkNCisNCitzdGF0aWMgc3RydWN0IGlycWFjdGlvbiAqaTgyNTlfaXJx
X2FjdGlvblsxNl0gPSB7DQorCU5VTEwsIE5VTEwsIE5VTEwsIE5VTEwsIE5V
TEwsIE5VTEwsIE5VTEwsIE5VTEwsDQorCU5VTEwsIE5VTEwsIE5VTEwsIE5V
TEwsIE5VTEwsIE5VTEwsIE5VTEwsIE5VTEwNCit9Ow0KKw0KK3N0YXRpYyBp
bmxpbmUgdm9pZCBpODI1OV9tYXNrX2lycSh1bnNpZ25lZCBpbnQgaXJxKQ0K
K3sNCisJY2FjaGVkX2lycV9tYXNrIHw9IDEgPDwgaXJxOw0KKwlpZiAoaXJx
ICYgOCkgew0KKwkJb3V0YihjYWNoZWRfQTEsIDB4YTEpOw0KKwl9IGVsc2Ug
ew0KKwkJb3V0YihjYWNoZWRfMjEsIDB4MjEpOw0KKwl9DQorfQ0KKw0KK3N0
YXRpYyBpbmxpbmUgdm9pZCBpODI1OV91bm1hc2tfaXJxKHVuc2lnbmVkIGlu
dCBpcnEpDQorew0KKyAgICAgICAgY2FjaGVkX2lycV9tYXNrICY9IH4oMSA8
PCBpcnEpOw0KKyAgICAgICAgaWYgKGlycSAmIDgpIHsNCisJCW91dGIoY2Fj
aGVkX0ExLCAweGExKTsNCisgICAgICAgIH0gZWxzZSB7DQorCQlvdXRiKGNh
Y2hlZF8yMSwgMHgyMSk7DQorCX0NCit9DQorDQorDQoraW50IGk4MjU5X3Nl
dHVwX2lycShpbnQgaXJxLCBzdHJ1Y3QgaXJxYWN0aW9uICogbmV3KQ0KK3sN
CisJaW50IHNoYXJlZCA9IDA7DQorCXN0cnVjdCBpcnFhY3Rpb24gKm9sZCwg
KipwOw0KKwl1bnNpZ25lZCBsb25nIGZsYWdzOw0KKw0KKwlwID0gaTgyNTlf
aXJxX2FjdGlvbiArIGlycTsNCisJaWYgKChvbGQgPSAqcCkgIT0gTlVMTCkg
ew0KKwkJLyogQ2FuJ3Qgc2hhcmUgaW50ZXJydXB0cyB1bmxlc3MgYm90aCBh
Z3JlZSB0byAqLw0KKwkJaWYgKCEob2xkLT5mbGFncyAmIG5ldy0+ZmxhZ3Mg
JiBTQV9TSElSUSkpDQorCQkJcmV0dXJuIC1FQlVTWTsNCisNCisJCS8qIENh
bid0IHNoYXJlIGludGVycnVwdHMgdW5sZXNzIGJvdGggYXJlIHRoZSBzYW1l
IHR5cGUgKi8NCisJCWlmICgob2xkLT5mbGFncyBeIG5ldy0+ZmxhZ3MpICYg
U0FfSU5URVJSVVBUKQ0KKwkJCXJldHVybiAtRUJVU1k7DQorCQ0KKwkJLyog
YWRkIG5ldyBpbnRlcnJ1cHQgYXQgZW5kIG9mIGlycSBxdWV1ZSAqLw0KKwkJ
ZG8gew0KKwkJCXAgPSAmIG9sZC0+bmV4dDsNCisJCQlvbGQgPSAqcDsNCisJ
CX0gd2hpbGUgKG9sZCk7DQorCQlzaGFyZWQgPSAxOw0KKwl9DQorDQorCWlm
IChuZXctPmZsYWdzICYgU0FfU0FNUExFX1JBTkRPTSkNCisJCXJhbmRfaW5p
dGlhbGl6ZV9pcnEoaXJxKTsNCisNCisJc2F2ZV9hbmRfY2xpKGZsYWdzKTsN
CisJKnAgPSBuZXc7DQorDQorCWlmICghc2hhcmVkKSB7DQorCQlpODI1OV91
bm1hc2tfaXJxKGlycSk7DQorCX0NCisJcmVzdG9yZV9mbGFncyhmbGFncyk7
DQorCXJldHVybiAwOw0KK30NCisNCisNCisvKiBlbmFibGUgYW5kIGRpc2Fi
bGUgZm9yIEVJU0EgaXJxcyAqLw0KKw0KK3ZvaWQgaTgyNTlfZGlzYWJsZV9p
cnEodW5zaWduZWQgaW50IGlycV9ucikNCit7DQorCXVuc2lnbmVkIGxvbmcg
ZmxhZ3M7DQorDQorCXNhdmVfYW5kX2NsaShmbGFncyk7DQorCWk4MjU5X21h
c2tfaXJxKGlycV9ucik7DQorCXJlc3RvcmVfZmxhZ3MoZmxhZ3MpOw0KK30N
CisNCit2b2lkIGk4MjU5X2VuYWJsZV9pcnEodW5zaWduZWQgaW50IGlycV9u
cikNCit7DQorCXVuc2lnbmVkIGxvbmcgZmxhZ3M7DQorDQorCXNhdmVfYW5k
X2NsaShmbGFncyk7DQorCWk4MjU5X3VubWFza19pcnEoaXJxX25yKTsNCisJ
cmVzdG9yZV9mbGFncyhmbGFncyk7DQorfQ0KKw0KKw0KK2ludCBpODI1OV9y
ZXF1ZXN0X2lycSh1bnNpZ25lZCBpbnQgaXJxLCANCisJCSAgICAgIHZvaWQg
KCpoYW5kbGVyKShpbnQsIHZvaWQgKiwgc3RydWN0IHB0X3JlZ3MgKiksDQor
ICAgICAgICAgICAgICAgICAgICAgIHVuc2lnbmVkIGxvbmcgZmxhZ3MsIA0K
KwkJICAgICAgY29uc3QgY2hhciAqZGV2aWNlLCANCisJCSAgICAgIHZvaWQg
KmRldl9pZCkNCit7DQorCWludCByZXR2YWw7DQorCXN0cnVjdCBpcnFhY3Rp
b24gKmFjdGlvbjsNCisJDQorCS8qIFdlIG9ubHkgaGF2ZSAwLTE1IGZvciAo
RSlJU0EgaXJxcyAqLw0KKwlpZiAoaXJxID49IDE2KQ0KKwkJcmV0dXJuIC1F
SU5WQUw7DQorCWlmICghaGFuZGxlcikNCisJCXJldHVybiAtRUlOVkFMOw0K
Kw0KKwlhY3Rpb24gPSAoc3RydWN0IGlycWFjdGlvbiAqKWttYWxsb2Moc2l6
ZW9mKHN0cnVjdCBpcnFhY3Rpb24pLCBHRlBfS0VSTkVMKTsNCisJaWYgKCFh
Y3Rpb24pDQorCQlyZXR1cm4gLUVOT01FTTsNCisNCisJYWN0aW9uLT5oYW5k
bGVyID0gaGFuZGxlcjsNCisJYWN0aW9uLT5mbGFncyA9IGZsYWdzOw0KKwlh
Y3Rpb24tPm1hc2sgPSAwOw0KKwlhY3Rpb24tPm5hbWUgPSBkZXZpY2U7DQor
CWFjdGlvbi0+bmV4dCA9IE5VTEw7DQorCWFjdGlvbi0+ZGV2X2lkID0gZGV2
X2lkOw0KKw0KKwlyZXR2YWwgPSBpODI1OV9zZXR1cF9pcnEoaXJxLCBhY3Rp
b24pOw0KKw0KKwlpZiAocmV0dmFsKQ0KKwkJa2ZyZWUoYWN0aW9uKTsNCisJ
cmV0dXJuIHJldHZhbDsNCit9DQorDQordm9pZCBpODI1OV9mcmVlX2lycSh1
bnNpZ25lZCBpbnQgaXJxLCB2b2lkICpkZXZfaWQpDQorew0KKwlzdHJ1Y3Qg
aXJxYWN0aW9uICphY3Rpb24sICoqcDsNCisJdW5zaWduZWQgbG9uZyBmbGFn
czsNCisNCisJaWYgKCBpcnEgPiAxNSkgeyANCisJCXByaW50aygiVHJ5aW5n
IHRvIGZyZWUgKEUpSVNBIElSUSVkXG4iLCBpcnEpOw0KKwkJcmV0dXJuOw0K
Kwl9DQorCWZvciAocCA9IGlycSArIGk4MjU5X2lycV9hY3Rpb247IChhY3Rp
b24gPSAqcCkgIT0gTlVMTDsgcCA9ICZhY3Rpb24tPm5leHQpIHsNCisJCWlm
IChhY3Rpb24tPmRldl9pZCAhPSBkZXZfaWQpDQorCQkJY29udGludWU7DQor
DQorCQkvKiBGb3VuZCBpdCAtIG5vdyBmcmVlIGl0ICovDQorCQlzYXZlX2Fu
ZF9jbGkoZmxhZ3MpOw0KKwkJKnAgPSBhY3Rpb24tPm5leHQ7DQorCQlpZiAo
IWlycVtpODI1OV9pcnFfYWN0aW9uXSkNCisJCQlpODI1OV9tYXNrX2lycShp
cnEpOw0KKwkJcmVzdG9yZV9mbGFncyhmbGFncyk7DQorCQlrZnJlZShhY3Rp
b24pOw0KKwkJcmV0dXJuOw0KKwl9DQorCXByaW50aygiVHJ5aW5nIHRvIGZy
ZWUgZnJlZSAoRSlJU0EgSVJRJWRcbiIsIGlycSk7DQorfQ0KKw0KK3N0YXRp
YyBpbmxpbmUgdm9pZCBpODI1OV9tYXNrX2FuZF9hY2tfaXJxKGludCBpcnEp
DQorew0KKwljYWNoZWRfaXJxX21hc2sgfD0gMSA8PCBpcnE7DQorCWlmIChp
cnEgJiA4KSB7DQorCQlpbmIoMHhhMSk7DQorCQlvdXRiKGNhY2hlZF9BMSwg
MHhhMSk7DQorCQlvdXRiKDB4NjIsIDB4MjApOyAgICAgICAgICAgICAgIC8q
IFNwZWNpZmljIEVPSSB0byBjYXNjYWRlICovDQorCQlvdXRiKDB4MjAsIDB4
YTApOw0KKwl9IGVsc2Ugew0KKwkJaW5iKDB4MjEpOw0KKwkJb3V0YihjYWNo
ZWRfMjEsIDB4MjEpOw0KKwkJb3V0YigweDIwLCAweDIwKTsNCisJfQ0KK30N
CisNCisNCithc21saW5rYWdlIHZvaWQgaTgyNTlfZG9faXJxKGludCBpcnEs
IHN0cnVjdCBwdF9yZWdzICpyZWdzKQ0KK3sNCisJc3RydWN0IGlycWFjdGlv
biAqYWN0aW9uOw0KKwlpbnQgZG9fcmFuZG9tLCBjcHU7DQorDQorCWNwdSA9
IHNtcF9wcm9jZXNzb3JfaWQoKTsNCisJaGFyZGlycV9lbnRlcihjcHUpOw0K
Kw0KKwlpZiAoaXJxID49IDE2KQ0KKwkJZ290byBvdXQ7DQorDQorCWk4MjU5
X21hc2tfYW5kX2Fja19pcnEoaXJxKTsNCisNCisJa3N0YXQuaXJxc1tjcHVd
W2lycV0rKzsNCisNCisJYWN0aW9uID0gKihpcnEgKyBpODI1OV9pcnFfYWN0
aW9uKTsNCisJaWYgKCFhY3Rpb24pDQorCQlnb3RvIG91dDsNCisNCisJaWYg
KCEoYWN0aW9uLT5mbGFncyAmIFNBX0lOVEVSUlVQVCkpDQorCQlfX3N0aSgp
Ow0KKwlhY3Rpb24gPSAqKGlycSArIGk4MjU5X2lycV9hY3Rpb24pOw0KKwlk
b19yYW5kb20gPSAwOw0KKwlkbyB7DQorCQlkb19yYW5kb20gfD0gYWN0aW9u
LT5mbGFnczsNCisJCWFjdGlvbi0+aGFuZGxlcihpcnEsIGFjdGlvbi0+ZGV2
X2lkLCByZWdzKTsNCisJCWFjdGlvbiA9IGFjdGlvbi0+bmV4dDsNCisJfSB3
aGlsZSAoYWN0aW9uKTsNCisJaWYgKGRvX3JhbmRvbSAmIFNBX1NBTVBMRV9S
QU5ET00pDQorCQlhZGRfaW50ZXJydXB0X3JhbmRvbW5lc3MoaXJxKTsNCisJ
X19jbGkoKTsNCisJaTgyNTlfdW5tYXNrX2lycSAoaXJxKTsNCisNCitvdXQ6
DQorCWhhcmRpcnFfZXhpdChjcHUpOw0KK30JDQorDQorX19pbml0ZnVuYyh2
b2lkIGk4MjU5X2luaXQodm9pZCkpDQorew0KKwkvKiBJbml0IG1hc3RlciBp
bnRlcnJ1cHQgY29udHJvbGxlciAqLw0KKwlvdXRiKDB4MTEsICgweDIwKSk7
IC8qIFN0YXJ0IGluaXQgc2VxdWVuY2UgKi8NCisJb3V0YigweDAwLCAoMHgy
MSkpOyAvKiBWZWN0b3IgYmFzZSAqLw0KKwlvdXRiKDB4MDQsICgweDIxKSk7
IC8qIGVkZ2UgdGlnZ2VyZWQsIENhc2NhZGUgKHNsYXZlKSBvbiBJUlEyICov
DQorCW91dGIoMHgwMSwgKDB4MjEpKTsgLyogU2VsZWN0IDgwODYgbW9kZSAq
Lw0KKwlvdXRiKDB4ZmYsICgweDIxKSk7IC8qIE1hc2sgYWxsICovDQorDQor
CS8qIEluaXQgc2xhdmUgaW50ZXJydXB0IGNvbnRyb2xsZXIgKi8NCisJb3V0
YigweDExLCAoMHhhMCkpOyAvKiBTdGFydCBpbml0IHNlcXVlbmNlICovDQor
CW91dGIoMHgwOCwgKDB4YTEpKTsgLyogVmVjdG9yIGJhc2UgKi8NCisJb3V0
YigweDAyLCAoMHhhMSkpOyAvKiBlZGdlIHRyaWdnZXJlZCwgQ2FzY2FkZSAo
c2xhdmUpIG9uIElSUTIgKi8NCisJb3V0YigweDAxLCAoMHhhMSkpOyAvKiBT
ZWxlY3QgODA4NiBtb2RlICovDQorCW91dGIoMHhmZiwgKDB4YTEpKTsgLyog
TWFzayBhbGwgKi8NCisNCisJb3V0YihjYWNoZWRfQTEsICgweGExKSk7DQor
CW91dGIoY2FjaGVkXzIxLCAoMHgyMSkpOw0KK30NCi0tLSBsaW51eC9hcmNo
L21pcHMvc2dpL2tlcm5lbC9laXNhLmMub3JpZwlUaHUgQXVnIDI2IDE1OjM2
OjI0IDE5OTkNCisrKyBsaW51eC9hcmNoL21pcHMvc2dpL2tlcm5lbC9laXNh
LmMJVGh1IEF1ZyAyNiAxNjoxMjowNCAxOTk5DQpAQCAtMCwwICsxLDcwIEBA
DQorLyoNCisgKg0KKyAqIGVpc2EuYzogIFN1cHBvcnQgZm9yIHRoZSAoRSlJ
U0EgYnVzIGZvdW5kIG9uIHRoZSBJbmRpZ28yDQorICoNCisgKiBDb3B5cmln
aHQgKEMpIDE5OTkgQW5kcmV3IFIuIEJha2VyIChhbmRyZXdiQHVhYi5lZHUp
DQorICoNCisgKi8NCisNCisjaW5jbHVkZSA8bGludXgvZXJybm8uaD4NCisj
aW5jbHVkZSA8bGludXgvaW5pdC5oPg0KKyNpbmNsdWRlIDxsaW51eC9rZXJu
ZWwuaD4NCisjaW5jbHVkZSA8bGludXgva2VybmVsX3N0YXQuaD4NCisjaW5j
bHVkZSA8bGludXgvc2NoZWQuaD4NCisjaW5jbHVkZSA8bGludXgvaW50ZXJy
dXB0Lmg+DQorI2luY2x1ZGUgPGxpbnV4L21hbGxvYy5oPg0KKyNpbmNsdWRl
IDxsaW51eC9yYW5kb20uaD4NCisNCisjaW5jbHVkZSA8YXNtL2lvLmg+DQor
I2luY2x1ZGUgPGFzbS9wdHJhY2UuaD4NCisjaW5jbHVkZSA8YXNtL3NnaW50
MjMuaD4NCisjaW5jbHVkZSA8YXNtL3NnaWVpc2EuaD4NCisjaW5jbHVkZSA8
YXNtL2k4MjU5Lmg+DQorDQorc3RydWN0IHNnaV9laXVfcmVncyAqc2dpX2Vp
dTsNCitpbnQgc2dpX2Vpc2FfYnVzID0gMDsNCisNCitzdGF0aWMgdm9pZCBl
aXNhX2ludChpbnQgaXJxLCB2b2lkICpkZXZfaWQsIHN0cnVjdCBwdF9yZWdz
ICpyZWdzKQ0KK3sNCisJLyogd2hpY2ggKEUpSVNBIGludGVycnVwdCBkaWQg
d2UgZ2V0PyAqLw0KKwlpbnQgZWlzYV9pcnEgPSBpbmIoMHgxMDAwNCk7DQor
CS8qIGZpbmQgb3V0IHdoaWNoIEVJU0EgaXJxIHdlIGdvdCBhbmQgY2FsbCBp
ODI1OV9kb19pcnEgKi8NCisJaTgyNTlfZG9faXJxKGVpc2FfaXJxLCByZWdz
KTsNCit9DQorDQordm9pZCBlaXNhX3Jlc2V0KHZvaWQpDQorew0KKwlpbnQg
aTsNCisJb3V0YigweDEsIDB4NDYxKTsNCisJLyogd2FpdCAqLw0KKwlmb3Ig
KGkgPSAwIDsgaSA8IDEwMDAgOyBpKyspDQorCQk7DQorCW91dGIoMHgwLCAw
eDQ2MSk7DQorfQ0KKw0KKw0KK19faW5pdGZ1bmModm9pZCBzZ2lfZWlzYV9p
bml0KHZvaWQpKQ0KK3sNCisJaWYoc2dpX2Vpc2FfYnVzKSANCisJew0KKwkJ
cHJpbnRrKCJJbml0aWFsaXppbmcgdGhlIChFKUlTQSBzdWJzeXN0ZW0uXG4i
KTsNCisNCisJCS8qIHNldHVwIHRoZSBFSVUgKi8NCisJCXNnaV9laXUgPSAo
c3RydWN0IHNnaV9laXVfcmVncyAqKSAoS1NFRzEgKyBTR0lfRUlVX0JBU0Up
Ow0KKwkJc2dpX2VpdS0+cHJlbXB0ID0gMHhmZmZmOw0KKwkJc2dpX2VpdS0+
cXVpZXQgPSAweDE7DQorCQlzZ2lfZWl1LT5tb2RlID0gMHg0MGYzYzA3ZjsN
CisNCisJCS8qIHNldCB0aGUgSS9PIGJhc2UgKi8NCisJCW1pcHNfaW9fcG9y
dF9iYXNlID0gS1NFRzEgfCBTR0lfRUlTQV9CQVNFOw0KKw0KKwkJLyogcmVz
ZXQgdGhlIGJ1cyAqLw0KKwkJZWlzYV9yZXNldCgpOw0KKwkNCisJCS8qIHNl
dHVwIHRoZSBpODI1OSBpbnRlcnJ1cHQgY29udHJvbGxlcnMgKi8NCisJCWk4
MjU5X2luaXQoKTsNCisJCQ0KKwkJLyogcmVnaXN0ZXIgdGhlIEVJU0EgYnVz
IGludGVycnVwdCBoYW5kbGVyICovDQorCQlyZXF1ZXN0X2lycShTR0lfRUlT
QV9JUlEsIGVpc2FfaW50LCAwLCAiRUlTQSBCdXMiLCBOVUxMKTsNCisJfQ0K
K30NCg==
--445303055-905674700-935702266=:17792--
